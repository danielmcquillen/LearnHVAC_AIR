<?xml version="1.0" encoding="utf-8"?>

<mx:Canvas 	xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns:myComps="*" 
			xmlns:view="com.mcquilleninteractive.learnhvac.view.*"
			xmlns:viewControllers="com.mcquilleninteractive.learnhvac.view.controllers.*"
			xmlns:util="com.mcquilleninteractive.learnhvac.util.*"
			xmlns:shortterm="com.mcquilleninteractive.learnhvac.view.shortterm.*"
			width="100%" 
			height="100%"
			preinitialize="onPreInit()"
			creationComplete="onCC()" 
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
		    creationPolicy="all"
		    hide="onHide()"
		    show="onShow()"
	  >
	
	<mx:Script>
		<![CDATA[
		import com.mcquilleninteractive.learnhvac.view.popups.SparkModal
		import com.mcquilleninteractive.learnhvac.model.SystemNodeModel;
		import com.mcquilleninteractive.learnhvac.event.AHUEvent;
		import com.mcquilleninteractive.learnhvac.event.LogoutEvent;
		import mx.core.IFlexDisplayObject;
		import mx.containers.Panel;
		import com.mcquilleninteractive.learnhvac.model.DialogManager
		import com.mcquilleninteractive.learnhvac.model.ScenarioModel
		import com.mcquilleninteractive.learnhvac.model.SparkRunsModel
		import com.mcquilleninteractive.learnhvac.event.ViewMovieEvent;
		import com.mcquilleninteractive.learnhvac.event.ShortTermSimulationEvent
		import com.mcquilleninteractive.learnhvac.event.ResetInputsToInitialValuesEvent
		import com.mcquilleninteractive.learnhvac.event.GraphEvent
		import com.mcquilleninteractive.learnhvac.view.controllers.SimulationViewController
		import com.mcquilleninteractive.learnhvac.view.popups.SimulationModal
		import com.mcquilleninteractive.learnhvac.view.LongTermSimulation
		import com.mcquilleninteractive.learnhvac.model.LHModelLocator	
		import com.mcquilleninteractive.learnhvac.event.VisualizationEvent	
		import com.mcquilleninteractive.learnhvac.event.AHUEvent	
		import com.mcquilleninteractive.learnhvac.event.ShowSchematicEvent	
		import com.mcquilleninteractive.learnhvac.event.ApplicationEvent	
		import com.mcquilleninteractive.learnhvac.event.SysVarInfoPopupEvent	
		import com.mcquilleninteractive.learnhvac.event.ScenarioLoadedEvent	
		import com.mcquilleninteractive.learnhvac.event.LoadScenarioEvent
		import com.mcquilleninteractive.learnhvac.util.Logger
		import com.adobe.cairngorm.control.CairngormEventDispatcher
		import com.mcquilleninteractive.learnhvac.event.SparkEvent            
		import com.mcquilleninteractive.learnhvac.view.event.SimNavEvent   
		import com.mcquilleninteractive.learnhvac.view.popups.HCLiquidsSchematicPanel
		import com.mcquilleninteractive.learnhvac.view.popups.CCLiquidsSchematicPanel
		import mx.managers.PopUpManager
		import flash.events.Event
		import mx.controls.Alert
		import mx.collections.ArrayCollection
		import mx.core.UIComponent
		import com.mcquilleninteractive.learnhvac.util.DebugPanel;

		private var simViewController:SimulationViewController
		private var dest:String 
		
		
		private var scenarioModel:ScenarioModel
							
		private var hcLiquidsSchematic:HCLiquidsSchematicPanel = null
		private var ccLiquidsSchematic:CCLiquidsSchematicPanel = null
		
		private var simModal:IFlexDisplayObject
		
		protected var _sparkModal:SparkModal
		
		//public var topNavFunctionList:Array
		
		[Bindable]
		public var model : LHModelLocator = LHModelLocator.getInstance();
		
		[Bindable]
		[Embed(source='assets/img/long_term_import_icon.png')]
		public var RealTimeImportIcon:Class
			
			
        public function onPreInit():void
		{
						
			//topNavFunctionList = new Array()
			
			//hook up listeners			
			var dispatcher:CairngormEventDispatcher = CairngormEventDispatcher.getInstance()
   			dispatcher.addEventListener(VisualizationEvent.EVENT_NAVIGATION_CHANGE_NODE, navChange)
   			dispatcher.addEventListener(ShowSchematicEvent.EVENT_SHOW_HC_LIQUIDS_POPUP, onShowSchematicPopup)
   			dispatcher.addEventListener(ShowSchematicEvent.EVENT_SHOW_CC_LIQUIDS_POPUP, onShowSchematicPopup)
   			dispatcher.addEventListener(SysVarInfoPopupEvent.EVENT_SHOW_INFO, sysVarInfoPopup)
   			dispatcher.addEventListener(SysVarInfoPopupEvent.EVENT_HIDE_INFO, sysVarInfoPopup)
   			dispatcher.addEventListener(SparkEvent.SPARK_CRASHED, onSparkCrash)
   			dispatcher.addEventListener(SparkEvent.SPARK_STARTUP_TIMEOUT, onSparkTimeout)
   			dispatcher.addEventListener(SparkEvent.SPARK_INTERVAL_TIMEOUT, onSparkTimeout)
			dispatcher.addEventListener(AHUEvent.EVENT_AHU_STOPPED, onAHUEvent)
			dispatcher.addEventListener(AHUEvent.EVENT_AHU_STARTED, onAHUEvent)
				
			//simViewController = new SimulationViewController();
			//simViewController.addEventListener("scenarioLoaded",onScenarioLoaded);
			dispatcher.addEventListener(ScenarioLoadedEvent.SCENARIO_LOADED, onScenarioLoaded)
			dispatcher.addEventListener(ApplicationEvent.EVENT_SELECT_NEW_SCENARIO, onSelectNewScenario)
			dispatcher.addEventListener(LogoutEvent.EVENT_LOGOUT, onLogout)
			
					
		}
				
		private function onHide():void
		{
			DialogManager.getInstance().hideAll()
		}
		
		private function onShow():void
		{			
			DialogManager.getInstance().showAll()
		}

		
		public function onCC():void
		{
			Logger.debug("#ShortTermSimulation: onCreationComplete ")
			//pnlViz.addEventListener("showSetPointControl", onShowSetPointControl)
			pnlViz.addEventListener("introAnimFinished", onIntroAnimFinished)	
			
			
		}
		
		public function onSelectNewScenario(event:ApplicationEvent):void
		{
			Logger.debug("#Simulation: onSelectNewScenario event received")
			clearSimPanel()
					
		}
		
		public function onLogout(event:LogoutEvent):void
		{
			Logger.debug("#Simulation: onLogout event received")
			clearSimPanel()
		}
		
		public function clearSimPanel():void
		{
			Logger.debug("#Simulation: clearVizPanel() called...cleaning up screen")
			//clean up everything on screen to get ready for new scenario
			
			//Clean up input panel
			if (pnlInput!=null) pnlInput.clearInputPanel() //if user logs out before loading a scenario, this will be null

			//clean up VizPanel
			if (pnlViz!=null) pnlViz.clearVizPanel() //if user logs out before loading a scenario, this will be null
			
			DialogManager.getInstance().removeAllPopUps()
									
			//turn off AHU and Spark
			if (LHModelLocator.getInstance().scenarioModel != null)
			{
				if (LHModelLocator.getInstance().scenarioModel.ahuStatus==ScenarioModel.AHU_ON)
				{
					stopSimulation()
				}	
			} 
		}
	
		
		public function navChange(navEvent:VisualizationEvent):void
		{
			//This function catches the navEvent launched by the miniNav from within the Visualization window
			
			//update the model 
			var scenarioModel:ScenarioModel = LHModelLocator.getInstance().scenarioModel
			scenarioModel.setCurrNode(navEvent.toNode)
						
			// update the combobox to the new node
			// this is a little tricky because the combobox uses a 
			// different index than scenarioModel.currNodeIndex  (b/c it doesn't show SPARK) 
			var len:Number = scenarioModel.sysNodesForNavArr.length
			for (var i:Number=0;i<len; i++)
			{
				var sysNode:SystemNodeModel = SystemNodeModel(scenarioModel.sysNodesForNavArr[i])
				if (sysNode.id == scenarioModel.currNode)
				{
					vizInfo.cboAhuNav.selectedIndex = i
				}
			}
			
			
			// we can use events for this later but right now it's easiest to just 
			// hit the input and output panel directly
			if (navEvent.toNode == ScenarioModel.SN_ROOF)
			{
				//don't update the input and output panel when navigating to roof
				//leave it as the last node viewed...this is a UI convention
			}
			else
			{
				pnlInput.onCurrNodeIndexChange()				
			}
		}
		 
				
		public function sysVarInfoPopup(event:SysVarInfoPopupEvent):void
		{
			
			if (event.type == SysVarInfoPopupEvent.EVENT_HIDE_INFO)
			{
				pnlSysVarInfo.visible = false
				pnlSysVarInfo.stopDrag()
				pnlSysVarInfo.x = 0
				pnlSysVarInfo.y = 0
			}
			else if (event.type == SysVarInfoPopupEvent.EVENT_SHOW_INFO)
			{
				pnlSysVarInfo.x = mouseX + 10
				pnlSysVarInfo.y = mouseY - 140
				pnlSysVarInfo.sysVarDisplayName.text = event.sysVarDisplayName 
				pnlSysVarInfo.sysVarName.text = event.sysVarName
				pnlSysVarInfo.description.text = event.sysVarDescription
				pnlSysVarInfo.lowValue.text  = event.lowValue
				pnlSysVarInfo.highValue.text = event.highValue
				pnlSysVarInfo.visible = true
				pnlSysVarInfo.startDrag()
			}
		}
		
		/*********  Event Handlers   *********/
		
			
		public function onScenarioLoaded(event:Event):void
		{
			Logger.debug("#Simulation: onScenarioLoaded()...now trying to hook up combo.")
			
			scenarioModel = LHModelLocator.getInstance().scenarioModel
			
			//show modal
			simModal = PopUpManager.createPopUp(this.parent, SimulationModal, true)
			PopUpManager.centerPopUp(simModal)
			
			//set combobox dataProvider
			vizInfo.cboAhuNav.dataProvider = model.scenarioModel.sysNodesForNavArr
			
			
		}
		
		public function onIntroAnimFinished(e:Event):void
		{
			Logger.debug("#ShortTermSimulation: onInputPanelsLoaded()...hiding modal.  ")
			try
			{
				PopUpManager.removePopUp(simModal)
				simModal = null
			}
			catch(e:Error)
			{
				Logger.error("#Simulation: onAnimationStarted error e: " + e.message)
			}
		}
		
		public function onShowSchematicPopup(event:ShowSchematicEvent):void
		{
			switch(event.type)
			{
				case ShowSchematicEvent.EVENT_SHOW_HC_LIQUIDS_POPUP:
					DialogManager.getInstance().showHCLiquidsSchematic()					
					break;
					
				case ShowSchematicEvent.EVENT_SHOW_CC_LIQUIDS_POPUP:					
					DialogManager.getInstance().showCCLiquidsSchematic()
					break;
					
				default:
					Logger.error("#Simulation: onShowSchematicPopup() unrecognized event: "+ event.type)	
			}
				
		}
			
		
		public function onAddMiniGraph():void
        {
        	var cgEvent:GraphEvent = new GraphEvent(GraphEvent.EVENT_ADD_MINI_GRAPH)
        	cgEvent.host = this
        	CairngormEventDispatcher.getInstance().dispatchEvent(cgEvent)
        }
          
        public function onSparkCrash(event:SparkEvent):void
        {
        	Logger.debug("#Simulation: onSparkCrash event received.")
        	// Tell user about SPARK crash in modal dialog IF THE CRASH WASN'T DUE TO TIMEOUT
        	var alertMsg:String = "Spark crashed. Error " + event.code + " : " + event.msg
        	mx.controls.Alert.show(alertMsg,"SPARK Crash")
        	if (_sparkModal!=null)
        	{
        		PopUpManager.removePopUp(_sparkModal)
        		_sparkModal = null
        	}
        	controlBar.simError()
        	      	        	        
        }
        
        public function onSparkTimeout(event:SparkEvent):void
        {
        	if (_sparkModal!=null)
        	{
        		PopUpManager.removePopUp(_sparkModal)
        		_sparkModal = null
        	}
        }
        
        public function onAHUEvent(event:AHUEvent):void
        {
        	switch (event.type)
        	{
        		case AHUEvent.EVENT_AHU_STOPPED:        			
					controlBar.simStopped() //reset buttons
        			break
        			
        		case AHUEvent.EVENT_AHU_STARTED:
        			break
        			
        		default:
        			
        	}
        	
        }
        
        
      	public function startSimulation():void
		{						
			if (pnlInput.areInputsValid("forStartup"))
			{							
				//show modal
				_sparkModal = new SparkModal()
				PopUpManager.addPopUp(_sparkModal,this,true)
				PopUpManager.centerPopUp(_sparkModal)				
				controlBar.simStarted()
				
				var cgEvent : ShortTermSimulationEvent = new ShortTermSimulationEvent(ShortTermSimulationEvent.EVENT_START_AHU);
				CairngormEventDispatcher.getInstance().dispatchEvent(cgEvent);
			}
			else
			{
				mx.controls.Alert.show(pnlInput.inputsErrorMsg + "\n", "Input Errors");
			}
		}
		
					
		public function stopSimulation():void
		{
			var cgEvent : ShortTermSimulationEvent = new ShortTermSimulationEvent(ShortTermSimulationEvent.EVENT_STOP_AHU);
			CairngormEventDispatcher.getInstance().dispatchEvent(cgEvent);
		}
				
		public function onSimNavEvent(event:SimNavEvent):void
		{
			Logger.debug("onSimNavEvent() event: " + event, this)
			pnlViz.simNavEvent(event);
		}
			
		
			
		]]>
	</mx:Script>
	
    <mx:Fade id="fadeIn" duration="200" alphaFrom="0.0" alphaTo="1.0"/>
       
    <mx:VBox width="100%" height="100%" id="mainHolder"  verticalGap="0" verticalScrollPolicy="off">
    	
    	<shortterm:ShortTermControlBar id="controlBar" width="100%" startSim="startSimulation()" stopSim="stopSimulation()" />
    	
    	<mx:Spacer height="10"/>
    	
		<mx:Canvas id="innerCanvas" 
			width="100%" height="100%"
			>
			
			<shortterm:InputPanel id="pnlInput" 
				x="10" y="0" 
				width="365" 
				height="540"
			     />
	
	
			<shortterm:VisualizationPanel id="pnlViz" x="385" y="0"  />
			
			<shortterm:VizPanelInfo id="vizInfo" x="383" y="500" simNav="onSimNavEvent(event)" />					
						
			<!-- popup info and panels -->    
			<shortterm:SysVarInfoPanel 
				id="pnlSysVarInfo" 
				visible="false"
				showEffect="fadeIn"
				x="20" y="20" />	
    
    		<!-- user PID controls 
			<view:SetPointControl id="setPointControl" visible="false"  x="400" y="400"/>
			-->
			
		</mx:Canvas> <!-- innerCanvas -->
	
	
							
	</mx:VBox>  
    	
</mx:Canvas>





