<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" 
		layout="absolute"
	 	title="Chart" 
		left="0" top="0" bottom="0" right="0" 
	 	dragEnter="onDragEnter(event)"
	    dragExit="onDragExit(event)"
	    dragDrop="onDragDrop(event)"
	 	creationComplete="onCreationComplete()" 
		>
		
	
	<mx:Script>
			<![CDATA[
				import com.mcquilleninteractive.learnhvac.model.SystemVariable;
				import com.mcquilleninteractive.learnhvac.model.IGraphDataModel;
				import com.mcquilleninteractive.learnhvac.model.EPlusData;
				import com.mcquilleninteractive.learnhvac.model.EPlusRunsModel
				import com.mcquilleninteractive.learnhvac.model.SparkRunsModel
				import mx.charts.ChartItem;
				import com.adobe.cairngorm.control.CairngormEvent
				import mx.managers.DragManager
				import mx.events.DragEvent
				import mx.core.DragSource
				import mx.core.UIComponent
				import com.mcquilleninteractive.learnhvac.util.Logger
				import com.mcquilleninteractive.learnhvac.model.LHModelLocator
				import com.mcquilleninteractive.learnhvac.model.ScenarioModel
				import mx.charts.chartClasses.ChartBase
				import mx.collections.ArrayCollection
				import mx.controls.Tree	
				import com.adobe.cairngorm.control.CairngormEventDispatcher
				import com.mcquilleninteractive.learnhvac.event.AddVarToGraphEvent
				import com.mcquilleninteractive.learnhvac.event.SetUnitsCompleteEvent
				import com.mcquilleninteractive.learnhvac.event.GraphEvent
				import mx.controls.Alert
				import com.mcquilleninteractive.learnhvac.view.graphing.DataTree
				
				public static var TIME_SERIES_GRAPH:String = "TS"
				public static var XY_PLOT_GRAPH:String = "XY"
				
				public var graphType:String = GraphPanel.TIME_SERIES_GRAPH //XY or TS
				private var graphVars:Array // array of variables to graph on this chart
								
				//Charts can only show variables from the same run, not mixed, so we keep a reference
				//to the dragSource as the first object is dragged over. Then we compare future drags against it's type
				//to make sure that it's the same as the first 
				private var originalDragInitiator:Tree 
				private var dataType:String // a local copy of the data type provided by the originalDragInitiator
				
				private var titlePrefix:String //prepends the title of the chart with "RT Run1: ", "LT Run1: " , etc.
				public var position:Number //1 for upper chart, 2 for lower chart
				
				/* DATA MODEL */
				public var graphDataModel:IGraphDataModel
				
				
				[Bindable]
				private var _horizontalTitle:String = "";
				
				[Bindable]
				private var _verticalTitle:String = "";
				
				[Bindable]
				private var _verticalTitle2:String = "";
				
				[Bindable]
			    public var var1Color:Number;

			    [Bindable]
    			public var var2Color:Number;
				
				public var dataSourceType:String = ScenarioModel.SPARK_DATA_TYPE //set when user drags item from DataTree.			

				public function onCreationComplete():void
				{
					graphVars= new Array()
					CairngormEventDispatcher.getInstance().addEventListener(GraphEvent.EVENT_REFRESH_GRAPH, refreshData, false, 0,true)
					CairngormEventDispatcher.getInstance().addEventListener(SetUnitsCompleteEvent.UNITS_CHANGED, onUnitsChanged, false, 0,true)
				}

				public function onUnitsChanged(event:SetUnitsCompleteEvent):void
				{
					refreshData(null)
				}

				public function setGraphType (graphType:String) :void
				{
					Logger.debug("setGraphType() graphType: " + graphType, this)
									
					this.graphType = graphType
					
					lineChart.visible = (graphType==GraphPanel.TIME_SERIES_GRAPH )
					plotChart.visible = (graphType==GraphPanel.XY_PLOT_GRAPH )
										
    				setGraphTitle()	
					setAxisTitles()
					    				
    				if (graphType==GraphPanel.XY_PLOT_GRAPH)
					{
						lineChart.visible = false
						plotChart.visible = true
						//only plot if XY chart has two variables
						if (graphVars.length>1)
						{
							getDataAndPlot()
						}
						else
						{
							//do nothing
						}
					}
					else if (graphType ==GraphPanel.TIME_SERIES_GRAPH ) 
					{					
						getDataAndPlot()
						//make sure graph is set back to normal minimum
						//lineHorizontalAxis.minimum = 0
						lineChart.visible = true
						plotChart.visible = false
					}
				}
				
		
				public function clear():void
				{
					graphVars = []
					this.title = "Graph"
					this.originalDragInitiator = null
					
					//clear TS
					lineHorizontalAxis.title = ""
	    			v1.title = ""
    				v2.title = ""
    				lineChart.dataProvider = new ArrayCollection()
    				
					//clear XY
    				plotChart.dataProvider = new ArrayCollection()
    				plotHorizontalAxis.title = ""
    				plotVerticalAxis.title = ""
    				
    				//show current graph
    				if (graphType==GraphPanel.TIME_SERIES_GRAPH )
					{
						lineSeries2.visible = false
						var2Renderer.visible = false
						plotChart.visible = false
					}
					else
					{
						lineChart.visible = false
						plotChart.visible = true
					}
					  				
				}
				
				
				public function onDragEnter(event:DragEvent):void
				{
					
					mx.managers.DragManager.showFeedback(mx.managers.DragManager.COPY)
										
					//We only want dataPoints to be dropped on graph, so filter out everything else here
					var dropTarget:Panel = event.currentTarget as Panel
				    if( event.dragInitiator is Tree ) {
						var ds:DragSource = event.dragSource
												
        				if( !ds.hasFormat("treeItems") ) return; // no useful data
         				var items:Array = ds.dataForFormat("treeItems") as Array
						
         				for(var i:Number=0; i < items.length; i++) {
             				var item:XML = XML(items[i])
             				if( item.localName() != "dataPoint" ) return; // only want dataPoints
         				}   
         				
         				//If this is the first drag, keep ref to dragSource
	     				if (originalDragInitiator==null)
	     				{
	     					originalDragInitiator = event.dragInitiator as Tree
	     				}
         				
     					if (event.dragInitiator != originalDragInitiator)
     					{
     						//if not, return without accepting drop
     						return
     					}
     					        				
     				}	 
     				else
     				{
     					return
     				}				
     				    				
     				// if everything is cool after all those checks, accept the drop
    				mx.managers.DragManager.acceptDragDrop(dropTarget);

				}
				
				public function onDragOver(event:DragEvent):void
				{
					//TO DO: visual key
				}
				
				public function onDragDrop(dragEvent:DragEvent):void
				{
					var dataTree:DataTree = DataTree(dragEvent.dragInitiator)
					graphDataModel = dataTree.graphDataModel
					
					Logger.debug("#GraphPanel: onDragDrop: dataTree.type; " + dataTree.type)
					
					switch (dataTree.type)
					{
						case EPlusRunsModel.RUN_1:
							titlePrefix = "LT Run1: "
							break
						case EPlusRunsModel.RUN_2:
							titlePrefix = "LT Run2: "
							break
						case SparkRunsModel.RUN_1:
							titlePrefix = "RT Run1: "
							break
						case SparkRunsModel.RUN_2:
							titlePrefix = "RT Run2: "
							break
						default:
							Logger.error("#GraphPanel: onDragDrop() unrecognized dataTree.type: " + dataTree.type)
					}	
						
					var dataType:String = dataTree.type					
					
					//update time axis to reflect datasource
					dataSourceType = dataTree.graphDataModel.getDataType()
					switch(dataSourceType)
					{
						case ScenarioModel.EPLUS_DATA_TYPE:
							lineHorizontalAxis.dataUnits = "days"
							lineHorizontalAxis.labelUnits = "days"
							break
						
						case ScenarioModel.SPARK_DATA_TYPE:
							lineHorizontalAxis.dataUnits = "seconds"
							lineHorizontalAxis.labelUnits = "seconds"
							break
							
						default:
							Logger.error("#GraphPanel: unrecognized GraphDataModel type: "+ graphType)
					}
					
					var ds:DragSource = dragEvent.dragSource
					var items:Array = ds.dataForFormat("treeItems") as Array
         			var item:XML = XML(items[0]);
     				
             		if (item.@id==undefined)
             		{
             			Logger.error("#GraphPanel: onDragDrop(): dropped item from menu did not have id attribute")
             			mx.controls.Alert.show("Internal Error. Cannot graph this variable. See log for details.")
             			return
             		}
             		addVarToGraph(item.@id)          			
				}
				
				public function onDragExit(event:DragEvent):void 
				{
					
    			}
    			
    			
    			private function isVarGraphed(itemID:String):Boolean
    			{
    				// Check if variable is already being graphed
    				var exists:Boolean = false
    				for (var i:Number=0; i<graphVars.length;i++)
    				{
    					if (graphVars[i]==itemID){
    						exists=true
    					}
    				}
    				return exists
    			}
    			
    			private function addVarToGraph(itemID:String):void
    			{
    				Logger.debug("#GraphPanel: addVarToGraph() itemID: " + itemID)
    				if (isVarGraphed(itemID)){
    					mx.controls.Alert.show("That variable is already being graphed")
    					return
    				}
    				
    				
    				//check if variable exists in model
    				if (!graphDataModel.varExists(itemID))
    				{
    					mx.controls.Alert.show("That variable does not exist in the source file")
    					return
    				}
    					
    				//replace second variable when 3rd or more is dragged on
    				if (graphVars.length>1)
    				{
    					Logger.debug("#GraphPanel: replacing " + graphVars[1] + " with " + itemID)
    					graphVars[1] = itemID
    				}
    				else
    				{
    					Logger.debug("#GraphPanel: adding first variable ")
    					graphVars.push(itemID)
    				}
    				
    				Logger.debug("#GraphPanel: now setting axis titles, title and getting data...")
    				setAxisTitles()
    				setGraphTitle()
    				getDataAndPlot()
    				
    			}
    			
    			public function setGraphTitle():void
    			{
    				Logger.debug("setGraphTitle() ", this)
    				var var1Name:String = ""
    				var var2Name:String = ""
    				
    				if (dataType==EPlusRunsModel.RUN_1 || dataType==EPlusRunsModel.RUN_2)
    				{
    					var sysVar1:SystemVariable = LHModelLocator.getInstance().scenarioModel.getSysVar(graphVars[0])
    					if (sysVar1!=null)
	    					var1Name = sysVar1.display_name
	   					if (graphVars[1]!=null)
	   						var sysVar2:SystemVariable = LHModelLocator.getInstance().scenarioModel.getSysVar(graphVars[1])	
    					if (sysVar2!=null)
    						var2Name = sysVar2.display_name
    				}
    				else
    				{
    					var1Name = graphVars[0]
    					if (graphVars.length>1)
	    					var2Name = graphVars[1]
    				}
    				    				
    				if (graphType==GraphPanel.TIME_SERIES_GRAPH )
    				{
    					//change title
    					var t:String = var1Name
         				if (graphVars.length>1){
         					t = t + " and " + var2Name
         				}
         				this.title = t + " vs. Time"
    				}
    				else if (graphType==GraphPanel.XY_PLOT_GRAPH )
    				{
    					if (graphVars.length>1)
    					{
    						this.title =  var1Name + " vs. " + var2Name
    					}
    					else
    					{
    						this.title = var1Name + " vs. " //and wait for next drop
    					}
    				}
    				
    				this.title = titlePrefix + this.title
    				
    			}
    			
    			public function setAxisTitles():void
    			{
       				Logger.debug("setAxisTItles()")
    				if (graphType==GraphPanel.TIME_SERIES_GRAPH )
    				{
    					if (dataSourceType==ScenarioModel.EPLUS_DATA_TYPE)
    					{
    						_horizontalTitle = "Time (days)"
    					}
    					else if(dataSourceType==ScenarioModel.SPARK_DATA_TYPE)
    					{
    						_horizontalTitle = "Time (secs)"
    					}
    					
       					Logger.debug("settting _verticalTitle")
    					_verticalTitle = getVarTitle(graphVars[0])
       					Logger.debug("_verticalTitle: " + _verticalTitle)
    					if (graphVars.length>1)
    					{	
    						var2Renderer.visible = true
    						_verticalTitle2 = getVarTitle(graphVars[1])
       						Logger.debug("_verticalTitle2: " + _verticalTitle2)
    					}
    				}
    				else if (graphType==GraphPanel.XY_PLOT_GRAPH )
    				{
    					_horizontalTitle = graphVars[0]
       					Logger.debug("_horizontalTitle: " + _horizontalTitle)
    					if (graphVars.length>1)
    					{
    						_verticalTitle = graphVars[1]
       						Logger.debug("_verticalTitle: " + _verticalTitle)
    					}
    				}
    			}
    			
				public function getVarTitle(varID:String):String
				{
    				var units:String = graphDataModel.getUnits(varID)
					if (units != "")
    				{
    					units = "(" + units + ")"
    				}
    				var name:String = graphDataModel.getVarName(varID)
					return name + " " + units
				}            	

				public function refreshData(event:CairngormEvent):void
				{
					if (graphVars.length>0)
					{
    					setAxisTitles()
    					setGraphTitle()
						getDataAndPlot()
					}
				} 		
						
				
				public function getDataAndPlot():void
				{
					Logger.debug("#GraphPanel: getDataAndPlot()")	
					
					try
					{
						if (graphType==GraphPanel.TIME_SERIES_GRAPH )
	    				{
							lineSeries2.visible = true //make sure second line series visible
							lineChart.dataProvider = new ArrayCollection(graphDataModel.getVarData(graphVars, true))	
	    				}
	    				else if (graphType==GraphPanel.XY_PLOT_GRAPH )
	    				{
	    					if (graphVars.length>1)
	    					{
	    						plotChart.dataProvider = new ArrayCollection(graphDataModel.getVarData(graphVars, false))
	    						
	    					}
	    				}
	   				}
	   				catch(err:Error)
	   				{
	   					Logger.error("Error trying to getVarData() err: " + err, this)
	   				}
	   					
				}
			
								
			]]>
	</mx:Script>
	

			
	<mx:Stroke id="var1Stroke" 
       	 	color="{var1Color}" 
       	 	weight="2" 
      	  	alpha="1"
       	 	caps="square"
	/>

	<mx:Stroke id="var2Stroke" 
      	  	color="{var2Color}" 
       	 	weight="2" 
       	 	alpha="1"
        	caps="square"
  	/>

	<mx:Canvas width="100%" height="100%">
			
		<mx:LineChart id="lineChart" 
			showDataTips="true" 
			width="100%" 
			height="100%"
			selectionMode="multiple" 
			seriesFilters="[]"
			>
       		
       		<!-- background elements -->
        	<mx:backgroundElements>
            	<mx:GridLines direction="horizontal"
                    horizontalTickAligned="true">
                	<mx:horizontalFill>
                    	<mx:SolidColor color="0xF6F6F6"/>
                	</mx:horizontalFill>
                	<mx:horizontalAlternateFill>
                    	<mx:SolidColor color="0xFFFFFF" />
                	</mx:horizontalAlternateFill>
            	</mx:GridLines>
        	</mx:backgroundElements>
       		
      	    		
			<mx:horizontalAxis>
				<mx:DateTimeAxis id="lineHorizontalAxis" dataUnits="seconds" labelUnits="seconds" displayLocalTime="true"  /> 
   	 			<!--<mx:DateTimeAxis dataUnits="hours" parseFunction="chartParseFunction"/>-->
   	 		 	<!--<mx:LinearAxis id="lineHorizontalAxis" title="Time (secs)" baseAtZero="false" />-->	
       		</mx:horizontalAxis>
            
      		<mx:verticalAxisRenderers>
      			<mx:AxisRenderer  id="var1Renderer" axis="{v1}" placement="left" verticalAxisTitleAlignment="vertical">
       	   	 		<mx:axisStroke>{var1Stroke}</mx:axisStroke>
       			</mx:AxisRenderer>
       			<mx:AxisRenderer id="var2Renderer" axis="{v2}" placement="right" visible="false" verticalAxisTitleAlignment="vertical">
       	       		<mx:axisStroke>{var2Stroke}</mx:axisStroke>
       			</mx:AxisRenderer>
       		</mx:verticalAxisRenderers>
            
       		 <mx:series>
       		     <mx:LineSeries id="lineSeries1"  xField="time" yField="value1" displayName="" selectable="true">
       	     		<mx:lineStroke> 
       	         	<mx:Stroke 
       	            		color="{var1Color}" 
       	            	 	weight="3"
       	    	      	 	caps="round"
       	        			 /> 
       	   	  		</mx:lineStroke> 
       	    	 	<mx:verticalAxis>
       	       			<mx:LinearAxis id = "v1" baseAtZero="false" title="{_verticalTitle}"/>
               		</mx:verticalAxis>
            	</mx:LineSeries>
            	<mx:LineSeries id="lineSeries2" xField="time" yField="value2" displayName="">
              		<mx:lineStroke> 
                		<mx:Stroke 
                   			color="{var2Color}" 
                   	 		weight="3"
                 	 		caps="round"
               		 	/> 
          	  		</mx:lineStroke> 
              		<mx:verticalAxis>
              			<mx:LinearAxis id = "v2" baseAtZero="false" title="{_verticalTitle2}" />
               		</mx:verticalAxis>
            	</mx:LineSeries>
	     	</mx:series>
            
		</mx:LineChart>
		
	
		<mx:PlotChart id="plotChart"
			visible="false" 
			showDataTips="true" 
			width="100%" 
			height="100%"
			selectionMode="multiple" 
		    seriesFilters="[]"
			>
			
			 <mx:series>
                <mx:PlotSeries id="plotSeries1" xField="value1" yField="value2" displayName="" selectable="true"/>
             </mx:series>
            
            <mx:horizontalAxis >
   	    		<mx:LinearAxis id="plotHorizontalAxis" title="{_horizontalTitle}" baseAtZero="false" />
       		</mx:horizontalAxis>
            
            <mx:verticalAxis>
            	<mx:LinearAxis id="plotVerticalAxis" title="{_verticalTitle}" baseAtZero="false" />
            </mx:verticalAxis>
            
            
		</mx:PlotChart>
	
	</mx:Canvas>
			
</mx:Panel>