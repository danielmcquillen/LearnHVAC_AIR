<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:myComps="*"
		xmlns:view="com.mcquilleninteractive.learnhvac.view.*"
		xmlns:viz="com.mcquilleninteractive.learnhvac.view.visualization.*"
		xmlns:overlay="com.mcquilleninteractive.learnhvac.view.shortterm.overlay.*"
	 	width="670" height="500" backgroundColor="#333333"
		creationComplete="onCreationComplete()"
	    horizontalScrollPolicy="off"
	    creationPolicy="all"
		verticalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import com.mcquilleninteractive.learnhvac.business.ShortTermSimulationDelegate;
			import com.mcquilleninteractive.learnhvac.event.CloseScenarioEvent;
			import com.mcquilleninteractive.learnhvac.model.ShortTermSimulationModel;
		import com.mcquilleninteractive.learnhvac.model.LongTermSimulationModel;
		import com.mcquilleninteractive.learnhvac.event.ZoneChangeEvent;		
		import com.mcquilleninteractive.learnhvac.event.ShortTermSimulationEvent;
		import com.mcquilleninteractive.particleengine.Particle;
		import com.mcquilleninteractive.particleengine.ParticleEngine;		
		import com.mcquilleninteractive.learnhvac.util.Logger	
		import com.mcquilleninteractive.learnhvac.event.SimNavEvent
		import com.mcquilleninteractive.learnhvac.event.VisualizationEvent
		import com.mcquilleninteractive.learnhvac.event.ScenarioLoadedEvent
		import com.mcquilleninteractive.learnhvac.model.ApplicationModel
		import com.mcquilleninteractive.learnhvac.model.ScenarioModel
        import mx.binding.utils.BindingUtils
        import mx.binding.utils.ChangeWatcher
		import mx.core.UIComponent
		import mx.events.PropertyChangeEvent
		import mx.events.FlexEvent
		import flash.events.Event            
		import mx.effects.Resize;

		[Event(name="showSetPointControl",type="flash.events.Event")]
		[Event(name="introAnimStarted",type="flash.events.Event")]
		[Event(name="introAnimFinished",type="flash.events.Event")]
				
		private var currNode:String 
		private var overlaysArr:Array
		private var pe:ParticleEngine
		private var peMasks:Array
		private var cwArr:Array = [];
		
		
		[Bindable]
		[Autowire]
		public var applicationModel:ApplicationModel
		
		[Bindable]
		[Autowire]
		public var scenarioModel:ScenarioModel
				
		[Bindable]
		[Autowire]
		public var shortTermSimulationModel:ShortTermSimulationModel
		
		[Bindable]
		[Autowire]
		public var longTermSimulationModel:LongTermSimulationModel
		
		[Embed(source='assets/PIDControl.swf', symbol='setPointControl3D')]
		[Bindable]
     	private var SetPoint3DControlImage:Class
		
		
		private function onCreationComplete():void
		{
			
			//add listener for miniNav,since it's not a part of SWIZ environment
			miniNav.addEventListener("miniNavChange", onMiniNavChange)
			
			overlaysArr = []
			
			//setup array of overlays for all nodes
			overlaysArr["overlayHC"] = overlayHC
			overlaysArr["overlayCC"] = overlayCC
			overlaysArr["overlayVAV"] = overlayVAV
			overlaysArr["overlayDIF"] = overlayDIF
			overlaysArr["overlayFlt"] = overlayFlt
			overlaysArr["overlayFAN"] = overlayFAN
			overlaysArr["overlayMX"] = overlayMX
			overlaysArr["overlaySYS"] = overlaySYS
			overlaysArr["overlayRF"] = overlayRF
			overlaysArr["overlayBOI"] = overlayBOI
			overlaysArr["overlayCHL"] = overlayCHL
			overlaysArr["overlayCTW"] = overlayCTW
			overlaysArr["overlayPLT"] = overlayPLT
			
			//add particle engine
			peMasks = []
			pe = new ParticleEngine()
			peCanvas.addChild(pe)
			pe.setScene(ScenarioModel.SN_ROOF)
			peCanvas.opaqueBackground = null
			
			//add PE masks
			//add masks
			peMasks[ScenarioModel.SN_DIFFUSER] = new peMaskDIF()
			peMasks[ScenarioModel.SN_HC] = new peMaskHC()
			peMasks[ScenarioModel.SN_CC] = new peMaskCC()
			peMasks[ScenarioModel.SN_FAN] = new peMaskFan()
			peMasks[ScenarioModel.SN_FILTER] = new peMaskFlt()
			peMasks[ScenarioModel.SN_MIXINGBOX] = new peMaskMX()
			peMasks[ScenarioModel.SN_SYSTEM] = new peMaskSYS()
			peMasks[ScenarioModel.SN_VAV] = new peMaskVAV()
			//add masks as children of peCanvas but keep them invisible
			for (var maskName:String in peMasks)
			{
				peMasks[maskName].visible = false
				peMasks[maskName].cacheAsBitmap = true
				peCanvas.addChild(peMasks[maskName])
			}	
							
		}	
		
		[Mediate(event="CloseScenarioEvent.CLOSE_SCENARIO")]
        public function onCloseScenario(event:CloseScenarioEvent):void
        {      	
			clearVizPanel()
        }
        
		[Mediate(event="ScenarioLoadedEvent.SCENARIO_LOADED")]
		public function onScenarioLoaded(evt:ScenarioLoadedEvent):void
		{
			Logger.debug("onScenarioLoaded()",this)
			currNode = ScenarioModel.SN_ROOF	
			pe.initPE()
			pe.setScene(currNode)
			playIntroAnim()
		}
		
		[Mediate(event="ShortTermSimulationEvent.SIM_OUTPUT_RECEIVED")]
		public function onSimOutputReceived(event:ShortTermSimulationEvent):void
		{
			try
			{				
				setDampersIA(scenarioModel.getSysVar("MXIntDampPos").currValue / 100)
				setDampersEA(scenarioModel.getSysVar("MXExDampPos").currValue / 100)
				setDampersRA(scenarioModel.getSysVar("MXRtnDampPos").currValue / 100)
				setVAVDamper(scenarioModel.getSysVar("VAVDampPos").currValue / 100)
			}
			catch
			(err:Error)
			{
				Logger.error("Couldn't set damper position: " + err, this)
			}			
			
		}
		
		
		[Mediate(event="ShortTermSimulationEvent.SIM_STOPPED")]
		public function onShortTermSimStopped(event:ShortTermSimulationEvent):void
		{
			pe.stopPE()
			//stop fan if it's visible in this node
			if (	currNode == ScenarioModel.SN_FAN 
					|| currNode == ScenarioModel.SN_ROOF 
					|| currNode == ScenarioModel.SN_SYSTEM)
			{
				fan.currentState = currNode + "_OFF"				
				Logger.debug("Setting fan to state: " + fan.currentState, this)
			}
		}
		
		
		
		/* If the zone is 5, we show the zone 5 system view hack image, otherwise we hide it*/
		[Mediate(event="ZoneChangeEvent.ZONE_CHANGED")]
		public function onLTSettingsChange(event:ZoneChangeEvent):void
		{
			//only has an affect if we're looking at the system view
			if (currNode==ScenarioModel.SN_SYSTEM)
			{
				imgCoreZoneSystemView.visible = (event.toZone==5)
			}
			
		}
		
		public function onIntroAnimStarted():void
		{
			dispatchEvent(new Event("introAnimStarted()"))
		}
		
		public function onIntroAnimFinished():void
		{
			dispatchEvent(new Event("introAnimFinished"))
			
			//make sure mixing box is in correct state
			mixingBox.currentState=ScenarioModel.SN_ROOF
		}
		
		
		public function clearVizPanel():void
		{
			currNode = ScenarioModel.SN_ROOF
			if (pipeLiquidsHC!=null) pipeLiquidsHC.visible = false
			if (pipeLiquidsCC!=null) pipeLiquidsCC.visible = false
			if (vavDamper!=null)vavDamper.visible = false
			if (btnSetPointControl3D!=null) btnSetPointControl3D.visible=false
			if (mixingBox!=null) mixingBox.currentState = "hidden"
			if (fan!=null) fan.visible = false
			hideOverlays()
			pe.stopPE()
		}
		
		
		
		public function playIntroAnim():void
		{
			dispatchEvent(new Event("introAnimStarted"))
			animPanel.playIntroAnim()
		}
		
		
				
		public function setDampersIA(value:Number):void
		{
			mixingBox.setDamper("OA", value)		
		}
		public function setDampersRA(value:Number):void
		{
			mixingBox.setDamper("RA", value)	
		}
		public function setDampersEA(value:Number):void
		{
			mixingBox.setDamper("EA", value)	
		}
		public function setVAVDamper(value:Number):void
		{
			vavDamper.setDamper(value)
		}
		
		[Mediate(event="ShortTermSimulationEvent.SIM_STARTED")]
		public function onShortTermSimStarted(event:ShortTermSimulationEvent):void
		{
			pe.startPE()
			Logger.debug("currNode: "  + currNode + " ScenarioModel.SN_FAN: " + ScenarioModel.SN_FAN, this) 
			//start fan if it's visible in this node
			if (	currNode == ScenarioModel.SN_FAN || 
					currNode == ScenarioModel.SN_ROOF ||
					currNode == ScenarioModel.SN_SYSTEM)
			{
				fan.currentState = currNode + "_ON"	
				Logger.debug("Setting fan to state: " + fan.currentState, this)
			}
		}
		
		
		public function onMiniNavChange(event:Event):void
		{
			var newNode:String = miniNav.newNode
			navigateTo(newNode)			
		}
		
		protected function navigateTo(newNode:String):void
		{
			if (currNode == newNode) return			
			hideNode()
			currNode = newNode	
			animPanel.navigateTo(currNode)
		}
		
		[Mediate(event="SimNavEvent.NAVIGATION")]		
		public function onSimNavEvent(event:SimNavEvent):void
		{
			Logger.debug("onSimNavEvent()",this)
			navigateTo(event.node)			
			
		}
						
		public function showNode():void
		{
			//Sets the current node's overlays after the animation has completed
			var currOverlay:String = "overlay"+currNode
			for (var overlay:String in overlaysArr)
			{
				if (overlay==currOverlay)
				{
					UIComponent(overlaysArr[overlay]).visible = true 
				}
			}
			
			//Set other node-specific stuff
			switch (currNode)
			{				
				case ScenarioModel.SN_HC:
					pipeLiquidsHC.active = true
					break
					
				case ScenarioModel.SN_CC:
					Logger.debug("#Viz: setting CC pipeLiquids to disabled=false")
					pipeLiquidsCC.active = true
					break
				
				case ScenarioModel.SN_FAN:
					//set fan according to AHU state
					fan.visible = true
					switch (shortTermSimulationModel.currentState)
					{
						case ShortTermSimulationModel.STATE_OFF:
						case ShortTermSimulationModel.STATE_PAUSED:
							Logger.debug("Setting fan to FAN_OFF",this)
							Logger.debug("fan.currentState: "+ fan.currentState,this)
							fan.currentState = "FAN_OFF"
							Logger.debug("fan.currentState: "+ fan.currentState,this)
							break
						case ShortTermSimulationModel.STATE_RUNNING:
							fan.currentState = "FAN_ON"
							break
						default:
							Logger.error("Unrecognized shortTermSimulatioModel state: " +shortTermSimulationModel.currentState,this)
					}
					break
				
				case ScenarioModel.SN_FILTER:
					break
				
				case ScenarioModel.SN_DIFFUSER:
					break
				
				case ScenarioModel.SN_VAV:
					vavDamper.visible = true
					try
					{
						vavDamper.setDamper(scenarioModel.getSysVar("VAVPos").currValue )
					}
					catch (e:Error)
					{
						Logger.debug("#VizPanel: couldn't update VAV pos when first showing ... variable not found?")
					}
					break
				
				case ScenarioModel.SN_MIXINGBOX:
					mixingBox.currentState=ScenarioModel.SN_MIXINGBOX
					try
					{
						setDampersIA( scenarioModel.getSysVar("MXIntDampPos").currValue )
						setDampersEA( scenarioModel.getSysVar("MXExDampPos").currValue )
						setDampersRA( scenarioModel.getSysVar("MXRtnDampPos").currValue )
					}
					catch (e:Error)
					{
						Logger.debug("#VizPanel: couldn't update MX when first showing ... msg: " + e.message)
					}
					break
				
				case ScenarioModel.SN_ROOF:
					//set fan according to AHU state
					fan.visible = true
					switch (shortTermSimulationModel.currentState)
					{
						case ShortTermSimulationModel.STATE_OFF:
						case ShortTermSimulationModel.STATE_PAUSED:
							fan.currentState = "RF_OFF"
							break
						case ShortTermSimulationModel.STATE_RUNNING:
							fan.currentState = "RF_ON"
							break
					}
					mixingBox.currentState=ScenarioModel.SN_ROOF
					break
				
				case ScenarioModel.SN_SYSTEM:
				
					if (longTermSimulationModel.zoneOfInterest==5) imgCoreZoneSystemView.visible = true
				
					fan.visible = true
					//set fan according to AHU state
					switch (shortTermSimulationModel.currentState)
					{
						case ShortTermSimulationModel.STATE_OFF:
						case ShortTermSimulationModel.STATE_PAUSED:
							fan.currentState = "SYS_OFF"
							break
						case ShortTermSimulationModel.STATE_RUNNING:
							fan.currentState = "SYS_ON"
							break
					}
					mixingBox.currentState=ScenarioModel.SN_SYSTEM
					btnSetPointControl3D.visible = true
					break
				
				default:
					Logger.error("#VisualiazationPanel: setView() unrecognized node:" + currNode)
						
			}
			
			//set the particle engine and mask
			pe.setScene(currNode)
			if (currNode == ScenarioModel.SN_ROOF || 
							currNode == ScenarioModel.SN_CHILLER ||
							currNode == ScenarioModel.SN_COOLINGTOWER || 
							currNode == ScenarioModel.SN_PLANT || 
							currNode ==  ScenarioModel.SN_BOILER)
			{
				pe.mask == null
			}
			else
			{
				pe.mask = peMasks[currNode]
			}
			
			//start PE if AHU is on
			if (shortTermSimulationModel.currentState==ShortTermSimulationModel.STATE_RUNNING)
			{
				pe.startPE()
			}
			
			//finally tell other windows to update			
			var evt:VisualizationEvent = new VisualizationEvent(VisualizationEvent.NAVIGATION_CHANGE_NODE, true)
			evt.toNode = currNode
			dispatchEvent(evt)
	
		}
			
		
		public function hideNode():void
		{
			// Hide all visual items that need to be hidden when showing the animation moving between nodes
			
			//stop and hide PE
			pe.stopPE()
			
			//hide overlays			
			hideOverlays()
			
			//hide node-specific stuff
			switch (currNode){
				
				case ScenarioModel.SN_HC:
					pipeLiquidsHC.active = false
					break
					
				case ScenarioModel.SN_CC:
					pipeLiquidsCC.active = false
					break
				
				case ScenarioModel.SN_FAN:
					fan.visible = false
					break
				
				case ScenarioModel.SN_FILTER:
					break
				
				case ScenarioModel.SN_DIFFUSER:
					break
				
				case ScenarioModel.SN_VAV:
					vavDamper.visible = false
					break
				
				case ScenarioModel.SN_MIXINGBOX:
					mixingBox.currentState = "hidden"
					break
				
				case ScenarioModel.SN_BOILER:
					break
					
				case ScenarioModel.SN_CHILLER:
					break
					
				case ScenarioModel.SN_COOLINGTOWER:
					break
					
				case ScenarioModel.SN_PLANT:
					break
					
				case ScenarioModel.SN_ROOF:
					fan.visible = false
					mixingBox.currentState = "hidden"
					break
				
				case ScenarioModel.SN_SYSTEM:
					fan.visible = false
					imgCoreZoneSystemView.visible = false //will be showing if zone of interest is 5
					mixingBox.currentState = "hidden"
					btnSetPointControl3D.visible = false
					break
				
				
				default:
					Logger.error("#VisualiazationPanel: setView() unrecognized node:" + currNode)
			}
			
		}	
		
		protected function hideOverlays():void
		{
			for (var overlay:String in overlaysArr)
			{
				UIComponent(overlaysArr[overlay]).visible = false 
			}
		}
		
		private function onShowSetPointControl():void
		{
			var e:Event = new Event("showSetPointControl")
			dispatchEvent(e)
		}
		
         
		
			
		]]>
	</mx:Script>
	

    
	<!-- anim -->
	<myComps:AnimationPanel	id="animPanel"  
		transitionFinished="showNode()" 
		introAnimationStarted="onIntroAnimStarted()" 
		introAnimationFinished="onIntroAnimFinished()" />
		
	<!-- HACK: this is the image to show when user views system view when zone of interest is 5 (core) -->
	<mx:Image id="imgCoreZoneSystemView"
		source="@Embed('assets/img/system_view_core_zone.png')"
		visible="false"
	/>
	
	<viz:PipeLiquidsHC id="pipeLiquidsHC" visible="false"/>
	<viz:PipeLiquidsCC id="pipeLiquidsCC" visible="false"/>
	<myComps:VAVDamper id="vavDamper" visible="false" />
	<myComps:MixingBox id="mixingBox" />
	<myComps:Fan id="fan" />
	
	<mx:Canvas id="peCanvas"
		backgroundAlpha="0"
		width="670" height="500" 
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"/>
	
    <mx:Button id="btnSetPointControl3D"
				x="203"
				y="287" 	
				upSkin="{SetPoint3DControlImage}" 
				overSkin="{SetPoint3DControlImage}"
				downSkin="{SetPoint3DControlImage}" 
			    mouseDown="onShowSetPointControl()"
			    useHandCursor="true"
			    visible = "false"
			    toolTip="Launch Set Point Control"
			    />
	
	<overlay:OverlayRF id="overlayRF" visible="false" />
	<overlay:OverlayMX id="overlayMX" visible="false"/>
	<overlay:OverlayFLT id="overlayFlt" visible="false"/>
	<overlay:OverlayHC id="overlayHC" visible="false" />
	<overlay:OverlayCC id="overlayCC" visible="false"/>
	<overlay:OverlayFAN id="overlayFAN" visible="false"/>
	<overlay:OverlayVAV id="overlayVAV" visible="false"/>	
	<overlay:OverlayDIF id="overlayDIF" visible="false"/>	
	<overlay:OverlaySYS id="overlaySYS" visible="false"/>	
	<overlay:OverlayBOI id="overlayBOI" visible="false"/>	
	<overlay:OverlayCHL id="overlayCHL" visible="false"/>
	<overlay:OverlayCTW id="overlayCTW" visible="false"/>
	<overlay:OverlayPLT id="overlayPLT" visible="false"/>
	
	<!-- nav -->
	<myComps:MiniNav  id="miniNav" x="315" y="250"   />
		
	<!--  status indicator -->
	<viz:ShortTermSimStatus id="shortTermSimStatus" x="476" y="-1" />
	
	
		
</mx:Canvas>
