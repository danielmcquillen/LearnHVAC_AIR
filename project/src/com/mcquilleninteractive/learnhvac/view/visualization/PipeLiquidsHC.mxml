<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:myComps="*"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	width="670" 
	height="500"
	creationComplete="onCreationComplete()"
	>
	
	<mx:Script>
		<![CDATA[
			import com.mcquilleninteractive.learnhvac.model.SystemVariable;
			import com.mcquilleninteractive.learnhvac.model.ShortTermSimulationModel;
			import mx.binding.utils.ChangeWatcher;
		
			// NOTE: For some reason databinding isn't working with systemVariable.baseSIValue...
			//       so I'm binding to currValue (which does work) and grabbing SI value manually
			// 		 This isn't as efficienct but since we're only doing this a couple times 
			//       per update the cost shouldn't be too significant
		
			import mx.messaging.AbstractConsumer;
			import flash.geom.ColorTransform
			import com.mcquilleninteractive.learnhvac.util.Logger
			import com.mcquilleninteractive.learnhvac.event.ShortTermSimulationEvent
			import mx.binding.utils.BindingUtils
			import com.mcquilleninteractive.learnhvac.model.ApplicationModel
			import com.mcquilleninteractive.learnhvac.model.ScenarioModel
   			import com.mcquilleninteractive.learnhvac.event.ScenarioLoadedEvent
			
			[Autowire]
			[Bindable]
			public var scenarioModel:ScenarioModel		
			
			[Bindable]
			[Autowire]
			public var shortTermSimulationModel:ShortTermSimulationModel		
									
			public var _active:Boolean = false
			public var model:ApplicationModel
			public var cwArr:Array = [] //keep an array of the change watchers for the init routines
						
				
			public function onCreationComplete():void
			{	
			}
			
			[Mediate(event="ShortTermSimulationEvent.SIM_STARTED")]
			public function onShortTermSimStarted(event:ShortTermSimulationEvent):void
			{
				updatePipes()
			}
			
			[Mediate(event="ShortTermSimulationEvent.SIM_OUTPUT_RECEIVED")]
			public function onShortTermSimUpdate(event:ShortTermSimulationEvent):void
			{				
				updatePipes()
			}
			
			[Mediate(event="ShortTermSimulationEvent.SIM_STOPPED")]
			public function onShortTermSimStopped(event:ShortTermSimulationEvent):void
			{
				liquidsHC.turnAllPipesOff()
			}
					
		
			
							
			
			public function updatePipes():void
			{
					var tLiqEnt:SystemVariable = scenarioModel.getSysVar("HCTLiqEnt")
					setTLiqEnt(tLiqEnt.baseSIValue)
					setTLiqbypass(tLiqEnt.baseSIValue)
					
					var tLiqLvg:SystemVariable = scenarioModel.getSysVar("HCTLiqLvg")
					setTLiqLvg(tLiqLvg.baseSIValue)
					setTLiqLvgValve(tLiqLvg.baseSIValue)
										
					var tLiqFlw:SystemVariable = scenarioModel.getSysVar("BOILiqFlw")
					setmLiqEnt(tLiqFlw.baseSIValue)
				
			}
			
			public function set active(state:Boolean):void
			{
				_active = state
				this.visible = state
				if (state)
				{
					//user has entered system node where this component should be visible
					//get latest current values if AHU is on
					
					if (shortTermSimulationModel.currentState == ShortTermSimulationModel.STATE_RUNNING)
					{
						updatePipes()				
					}
				}
				else
				{
					//turn off component, no longer visible
					liquidsHC.turnAllPipesOff()
				}
			}
					
			
			public function setTLiqEnt(value:Number):void
			{
				if (isNaN(value)) return
				if (!_active) return				
				liquidsHC.setTemp(value, 0)
				liquidsHC.setTemp(value, 1)
			}			
					
			public function setTLiqbypass(value:Number):void
			{
				if (isNaN(value)) return
				if (!_active) return				
				liquidsHC.setTemp(value, 2)
			}
			
			public function setTLiqLvg(value:Number):void
			{
				
				if (isNaN(value)) return
				if (!_active) return			
				liquidsHC.setTemp(value, 3)
			}
			
			public function setTLiqLvgValve(value:Number):void
			{
				if (isNaN(value)) return
					
					
				if (!_active) return
				liquidsHC.setTemp(value, 4)                                                                                                                                                         
			}
						
			public function setmLiqEnt(value:Number):void
			{
				if (isNaN(value)) return
				value = value * 10000
				if (!_active) return						
				liquidsHC.setFlow(value, 0)
				liquidsHC.setFlow(value, 1)
				liquidsHC.setFlow(value, 2)
				liquidsHC.setFlow(value, 3)
			}
					
			
		
			
		]]>
	</mx:Script>
	
	<myComps:HCPipes id="liquidsHC" />
	
</mx:Canvas>
