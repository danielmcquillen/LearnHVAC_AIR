<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:myComps="*"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	width="670" 
	height="500"
	creationComplete="onCreationComplete()"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.ChangeWatcher;
		
			// NOTE: For some reason databinding isn't working with systemVariable.baseSIValue...
			//       so I'm binding to currValue (which does work) and grabbing SI value manually
			// 		 This isn't as efficienct but since we're only doing this a couple times 
			//       per update the cost shouldn't be too significant
		
			import mx.messaging.AbstractConsumer;
			import flash.geom.ColorTransform
			import com.mcquilleninteractive.learnhvac.util.Logger
			import com.mcquilleninteractive.learnhvac.event.ShortTermSimulationEvent
			import mx.binding.utils.BindingUtils
			import com.mcquilleninteractive.learnhvac.model.ApplicationModel
			import com.mcquilleninteractive.learnhvac.model.ScenarioModel
   			import com.mcquilleninteractive.learnhvac.event.ScenarioLoadedEvent
			
			
			[Bindable]
			[Autowire]
			public var scenarioModel:ScenarioModel		
									
			public var _active:Boolean = false
			public var model:ApplicationModel
			public var scenModel:ScenarioModel
			public var cwArr:Array = [] //keep an array of the change watchers for the init routines
						
				
			public function onCreationComplete():void
			{
				Logger.debug("#PipeLiquidsHC onCreationComplete()")			
			}
			
			[Mediate(event="ShortTermSimulationEvent.SIM_STARTED")]
			public function onShortTermSimStarted(event:ShortTermSimulationEvent):void
			{
				updatePipes()
			}
			
			[Mediate(event="ShortTermSimulationEvent.SIM_STOPPED")]
			public function onShortTermSimStopped(event:ShortTermSimulationEvent):void
			{
				liquidsHC.turnAllPipesOff()
			}
					
			
			[Mediate(event="ScenarioLoadedEvent.SCENARIO_LOADED")]
			public function scenarioLoaded(e:Event):void
			{	
				Logger.debug("#PipeHC: scenarioLoaded()")	
				initBindings()
			}
			
			public function initBindings():void
			{
				while (cwArr.length>0)
				{
					ChangeWatcher(cwArr.pop()).unwatch()
				}
				
				Logger.debug("#PipeHC: initBindings()")
							
				//setup bindings for temperature	
				cwArr.push(BindingUtils.bindSetter(setTLiqEnt, scenarioModel.getSysVar("HCTLiqEnt"), "currValue" ))
				cwArr.push(BindingUtils.bindSetter(setTLiqLvg, scenarioModel.getSysVar("HCTLiqLvg"), "currValue" ))
				cwArr.push(BindingUtils.bindSetter(setTLiqbypass, scenarioModel.getSysVar("HCTLiqbypass"), "currValue" ))
				cwArr.push(BindingUtils.bindSetter(setTLiqLvgValve, scenarioModel.getSysVar("HCTLiqLvgValve"), "currValue" ))
				
				
				//setup bindings for mass flow
				cwArr.push(BindingUtils.bindSetter(setmLiqLvgValve, scenarioModel.getSysVar("HCmLiqLvgValve"), "currValue" ))
				cwArr.push(BindingUtils.bindSetter(setmLiqEnt, scenarioModel.getSysVar("HCmLiqEnt"), "currValue" ))
				cwArr.push(BindingUtils.bindSetter(setmLiqbypass, scenarioModel.getSysVar("HCmLiqbypass"), "currValue" ))
				cwArr.push(BindingUtils.bindSetter(setmLiqLvg, scenarioModel.getSysVar("HCmLiqLvg"), "currValue" ))
				
			}
			
		
			
			public function updatePipes():void
			{
				try
				{
					setTLiqEnt(scenModel.getSysVar("HCTLiqEnt").baseSIValue)
					setTLiqLvg(scenModel.getSysVar("HCTLiqLvg").baseSIValue)
					setTLiqbypass(scenModel.getSysVar("HCTLiqbypass").baseSIValue)
					setTLiqLvgValve(scenModel.getSysVar("HCTLiqLvgValve").baseSIValue)
							
					setmLiqLvgValve(scenModel.getSysVar("HCmLiqLvgValve").baseSIValue)
					setmLiqEnt(scenModel.getSysVar("HCmLiqEnt").baseSIValue)
					setmLiqbypass(scenModel.getSysVar("HCmLiqbypass").baseSIValue)
					setmLiqLvg(scenModel.getSysVar("HCmLiqLvg").baseSIValue)
				}					
				catch(e:Error)
				{
					Logger.error("#PipeLiquidsHC: couldn't set a field value when trying to updatePipes()")
				}	
			}
			
			public function set active(state:Boolean):void
			{
				_active = state
				this.visible = state
				if (state)
				{
					//user has entered system node where this component should be visible
					//get latest current values if AHU is on
					
					if (scenarioModel.ahuStatus == ScenarioModel.AHU_ON)
					{
						updatePipes()				
					}
				}
				else
				{
					//turn off component, no longer visible
					liquidsHC.turnAllPipesOff()
				}
			}
					
			
			public function setTLiqEnt(value:Number):void
			{
				if (!_active) return
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCTLiqEnt").baseSIValue
				
				liquidsHC.setTemp(value, 0)
				liquidsHC.setTemp(value, 1)
			}			
					
			public function setTLiqbypass(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCTLiqbypass").baseSIValue
				
				liquidsHC.setTemp(value, 2)
			}
			
			public function setTLiqLvg(value:Number):void
			{
				
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCTLiqLvg").baseSIValue
				
				liquidsHC.setTemp(value, 3)
			}
			
			public function setTLiqLvgValve(value:Number):void
			{
				if (!_active) return
								
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCTLiqLvgValve").baseSIValue
				liquidsHC.setTemp(value, 4)
			}
						
			public function setmLiqLvgValve(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCmLiqLvgValve").baseSIValue
				
				liquidsHC.setFlow(value, 0)
				liquidsHC.setFlow(value, 4)
			}
			
			public function setmLiqEnt(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCmLiqEnt").baseSIValue
				
				liquidsHC.setFlow(value, 1)
			}
			
			public function setmLiqbypass(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCmLiqbypass").baseSIValue
				
				liquidsHC.setFlow(value, 2)
			}
			
			public function setmLiqLvg(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenModel.getSysVar("HCmLiqLvg").baseSIValue
				
				liquidsHC.setFlow(value, 3)
			}
					
			
		
			
		]]>
	</mx:Script>
	
	<myComps:LiquidsHC id="liquidsHC" />
	
</mx:Canvas>
