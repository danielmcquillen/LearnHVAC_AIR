<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:myComps="*"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	width="670" 
	height="500"
	creationComplete="onCreationComplete()"
	>
	
	<mx:Script>
		<![CDATA[
		
			// NOTE: For some reason databinding isn't working with systemVariable.baseSIValue...
			//       so I'm binding to currValue (which does work) and grabbing SI value manually
			// 		 This isn't as efficiency but since we're only doing this a couple times 
			//       per update the cost shouldn't be too significant
		
			import flash.geom.ColorTransform
			import com.mcquilleninteractive.learnhvac.util.Logger
			import mx.binding.utils.BindingUtils
			import com.mcquilleninteractive.learnhvac.model.ApplicationModel
			import com.mcquilleninteractive.learnhvac.event.ShortTermSimulationEvent
			import com.mcquilleninteractive.learnhvac.model.ScenarioModel
   			import com.mcquilleninteractive.learnhvac.event.ScenarioLoadedEvent
									
			
			[Bindable]
			[Autowire]
			public var scenarioModel:ScenarioModel											
									
			public var _active:Boolean = false
			
			public function onCreationComplete():void
			{		
			}
			
			[Mediate(event="ScenarioLoadedEvent.SCENARIO_LOADED")]
			public function scenarioLoaded(e:Event):void
			{	
				initBindings()
			}
			
			[Mediate(event="ShortTermSimulationEvent.SIM_STARTED")]
			public function onShortTermSimStarted(event:ShortTermSimulationEvent):void
			{
				updatePipes()
			}
			
			[Mediate(event="ShortTermSimulationEvent.SIM_STOPPED")]
			public function onShortTermSimStopped(event:ShortTermSimulationEvent):void
			{
				liquidsCC.turnAllPipesOff()
			}
			
			
			public function initBindings():void
			{				
				BindingUtils.bindSetter(setTLiqEntValve, scenarioModel.getSysVar("CCTLiqEntValve"), "currValue" )
				BindingUtils.bindSetter(setTLiqLvg, scenarioModel.getSysVar("CCTLiqLvg"), "currValue" )
				BindingUtils.bindSetter(setmLiqEnt, scenarioModel.getSysVar("CCmLiqEnt"), "currValue" )
			}	
				
			
			public function updatePipes():void
			{
				try
				{
					setTLiqEntValve(scenarioModel.getSysVar("CCTLiqEntValve").baseSIValue)
					setTLiqLvg(scenarioModel.getSysVar("CCTLiqLvg").baseSIValue)
					setmLiqEnt(scenarioModel.getSysVar("CCmLiqEnt").baseSIValue)
				}					
				catch(e:Error)
				{
					Logger.error("#PipeLiquidsCC: couldn't set a field value when trying to updatePipes()")
				}	
			}
				
			public function set active(state:Boolean):void
			{
				_active = state
				this.visible = state
				if (state)
				{
					//user has entered system node where this component should be visible
					//get latest current values if AHU is on
					
					if (scenarioModel.ahuStatus == ScenarioModel.AHU_ON)
					{
						updatePipes()				
					}
				}
				else
				{
					//turn off component, no longer visible
					liquidsCC.turnAllPipesOff()
				}
			}
					
					
			public function setTLiqEntValve(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenarioModel.getSysVar("CCTLiqEntValve").baseSIValue
				liquidsCC.setTemp(value, 0)
				liquidsCC.setTemp(value, 1)
			}			
					
			public function setTLiqLvg(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenarioModel.getSysVar("CCTLiqLvg").baseSIValue
				
				liquidsCC.setTemp(value, 2)
				liquidsCC.setTemp(value, 3)
			}
					
			public function setmLiqEnt(value:Number):void
			{
				if (!_active) return
				
				//get SI value manually -- see note above
				value = scenarioModel.getSysVar("CCmLiqEnt").baseSIValue
				
				liquidsCC.setFlow(value, 0)
				liquidsCC.setFlow(value, 1)
				liquidsCC.setFlow(value, 2)
				liquidsCC.setFlow(value, 3)
			}
			
				
			
		]]>
	</mx:Script>
	
	<myComps:LiquidsCC id="liquidsCC" />
	
</mx:Canvas>
