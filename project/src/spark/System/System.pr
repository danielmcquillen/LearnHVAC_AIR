/// \file  System.pr
/// \brief  the problem definition
///


//	********************************************************************					
//	*		AHU	System	Simulation	
//	*		Peng	"Xu,"	2006.1.2	
//	*		modified B Coffey, Feb-July 2008, Sept 2008, Feb 2009, July 2009
//	*		*			
//	*		includes:
//	*		filter				
//	*		mixing box			
//	*		cooling coil			
//	*		heating coil			
//	*		supply fan			
//	*		VAV box			
//	*		duct work			
//	*		split-range PI control of cooling coil and heating coil, economizer control of mixing box
//	*		PI control of supply fan
//	*		Pressure dependent VAV box				
//  *       boiler
//  *       chiller
//  *       cooling tower
//	*									
//	********************************************************************	



// *** Run Control, Timestep, Input-Output Files, Etc *******************************************************************

// declare input.txt and output.txt
declare FileRead 			R;
declare FileWrite 			W;
LINK INPDUMMY				R.inpdummy INPUT ;

// declare and link time, timestep and runcontrol variables
DECLARE	time				t;	
declare runcontrol 			S;
declare	safprod				cal;	
LINK	timeScale			R.timeScale	t.timeScale "Waiting time" ;
link    last  				t.Lasttime INPUT_FROM_LINK=current ;
LINK	current	 			t.Currenttime init=1.0 ;	
link	timestep 			W.timestep	cal.a  GLOBAL_TIME_STEP;
LINK	calcInterval		R.calcInterval	cal.b	;
link    step 				W.Tstep GLOBAL_TIME  ;
link 	SPARKStatus 		R.SPARKRUN S.SPARKRUN  init=1.0 ;

// **********************************************************************************************************************


// *** Class Declarations ***********************************************************************************************

// declare controllers
//declare	PI					 ;  // BC-Feb22-08, replaced HCPI, CCPI, MXPI with HeatCoolPI
declare PIplusminus			VAVDAMPPI VAVPI HeatCoolPI FanPI ; // changed BC-Feb6-09
declare uSplitter			uHeatCoolSplit; // added BC-Feb22-08
declare VAVsetpointmanager  VAVSPmanager;

// declare sensors
declare sensor_dryBulb_generic			s_mx, s_supply, s_rm, s_VAVout;
declare sensor_staticPressure_generic	s_fan;

// declare actuators

// declare hvac secondary system components
declare	fan					fa;						
declare	heatingcoil			HC, VAVHC;			
declare	coolingcoil			CC;						
declare	mix					MX;				
declare	VAV_damper			VAV_damper;	
declare VAV_damper_position VAV_damper_position; 
declare VAV_control  		VAV_control;
declare	room				Rm;				
declare	filter				fi;	

// declare hvac primary components
DECLARE sboiler          	boiler;  // SPARK model of the EnergyPlus BOILER:SIMPLE component
declare chillerDOE2			chiller;
declare coolingTowerNTU		coolingTower;

// declare hvac-related variables	
declare	wetbulb_accl		OutWB, RetWB, MixWB, HCentWB, HClvgWB, CClvgWB,	FanlvgWB, VAVHClvgWB;
declare	equal_link			CCtoFAN_DB,CCtoFAN_HR,FANtoTS_DB,FANtoHC_MF, HCtoCC_DB	HCtoCC_HR	HCtoCC_MF	MBtoHC_DB	FItoHC_MF	OAtoMX_w	MXtoHC_w	OAtoMX_DB	FAtoVA_DB	FAtoVA_HR	VAtoRM_MF	 FAtoSA_MF	HCtoCC_WB	CCtoFA_WB	FAtoVA_WB FANenttoFANlvg_MF;
declare	safprod				RoomAirflowFrac;

// **********************************************************************************************************************


// *** Timestep Linking *************************************************************************************************

// link timestep value to necessary hvac and controls components  
LINK	Tstep				cal.c HeatCoolPI.dt FanPI.dt VAVPI.dt VAVDAMPPI.dt s_supply.dt s_mx.dt s_fan.dt s_rm.dt s_VAVout.dt Rm.dt chiller.timestep coolingTower.timestep;				

// **********************************************************************************************************************


// *** Sensor Parameters ************************************************************************************************
// added BC-May28-08

link	fanSensor_offset	s_fan.P_offset 		init=0 parameter;
link	mxSensor_offset		s_mx.T_offset 		init=0 parameter;
link	supSensor_offset_n	R.TSupSensorOffset	;
link	supSensor_offset	s_supply.T_offset	init=0 parameter;
//link	supSensor_offset	s_supply.T_offset	R.TSupSensorOffset;
link	rmSensor_offset		s_rm.T_offset 		init=0 parameter;
link	VAVoutSensor_offset		s_VAVout.T_offset 		init=0 parameter;


link 	fanSensor_timeConstant 	s_fan.timeConstant 	init=5 parameter;
link 	mxSensor_timeConstant 	s_mx.timeConstant 	init=30 parameter;
link 	supSensor_timeConstant 	s_supply.timeConstant init=30 parameter;
link 	rmSensor_timeConstant 	s_rm.timeConstant 	init=30 parameter;
link 	VAVoutSensor_timeConstant 	s_VAVout.timeConstant 	init=30 parameter;

// **********************************************************************************************************************


// *** HeatCool Controller **********************************************************************************************
// added BC-Feb22-08

// link Split Range Controller Splitter Parameters
LINK	uHeatCoolS1			uHeatCoolSplit.s1	R.HeatCoolS1 ;
LINK	uHeatCoolS2			uHeatCoolSplit.s2	R.HeatCoolS2 ;

// link Split Range Controller PI Paramters
LINK	HeatCoolPIKp		HeatCoolPI.Kp	R.HeatCoolKp ;	
LINK	HeatCoolPIKi		HeatCoolPI.Ki 	R.HeatCoolKi ;	
LINK	HeatCoolPIKd		R.HeatCoolKd ;	
LINK	HeatCoolPIfr		HeatCoolPI.fr 	R.HeatCoolfr ;
LINK	HeatCoolPIbias		HeatCoolPI.bias R.HeatCoolbias ;
LINK	HeatCoolPIi			HeatCoolPI.i	init=0.0 W.MXTwOut ; 
LINK	HeatCoolPIiP		HeatCoolPI.iP	INPUT_FROM_LINK=HeatCoolPIi W.MXTwmix ;  

LINK 	fanTempRiseEst		uHeatCoolSplit.fanTempRiseEst 	init=0.5 parameter;

// output from PI - link to Splitter 
LINK	uHeatCoolU			HeatCoolPI.u uHeatCoolSplit.PIcontrolSignalIn W.MXTOut;
LINK 	uHeatCoolCurLev		uHeatCoolSplit.curControlLevel  init=0.5 W.uCombined ;
LINK 	uHeatCoolPrevLev	uHeatCoolSplit.prevControlLevel INPUT_FROM_LINK=uHeatCoolCurLev W.MXTmix;


// **********************************************************************************************************************


// *** AHU Supply Air (General Variables) *******************************************************************************

// input to PI (supply air temperature)
LINK	TSupSet				R.TSupS HeatCoolPI.w uHeatCoolSplit.TsaSet W.MXTs W.HCTs W.CCTs ;	// BC-Feb22-08, added HeatCoolPI.w, removed HCPI.w, MXPI.w, CCPI.w	
link	TSupMea				s_supply.T_sensor W.TsupMea W.TAirSup init=15.0;
link 	TSupMeaP 			HeatCoolPI.y INPUT_FROM_LINK=TSupMea ; // note: added BC-July15-0-9, to ensure avoidance of any non-convergence problems
link	TsupRealSS			s_supply.T_real FANtoTS_DB.b W.HCTp W.CCTp W.TsupReal ; 

// AHU supply air flow rate
link	MAirsup				W.MAirsup FAtoSA_MF.b RoomAirflowFrac.a ; 

// zone supply air rate (fraction of AHU supply rate when damper fully open)
link	RoomAirflowFrac 	RoomAirflowFrac.b init=0.15 parameter ; // (note that RoomAirflowFrac.c is linked to max VAV flow rate, c = a*b)

// **********************************************************************************************************************


// *** Outdoor Air ******************************************************************************************************

// link Outdoor air variables
LINK	PAtm				R.PAtm	OutWB.pAtm, RetWB.pAtm, MixWB.pAtm, CC.PAtm	HCentWB.pAtm	HClvgWB.pAtm	CClvgWB.pAtm	FanlvgWB.pAtm	VAVHClvgWB.pAtm	;
LINK	TAirOut				R.TAirOut OutWB.TDb Rm.TOut OAtoMX_DB.b uHeatCoolSplit.OAT ;						
LINK	TwAirOut			R.TwAirOut OutWB.TWb coolingTower.TWb ; //W.MXTwOut
LINK 	wAirOut				OutWB.w OAtoMX_w.b  init = 0.05 ;

// **********************************************************************************************************************
 

// *** Mixing Box *******************************************************************************************************

// link MX air variables
LINK	MXTRet				R.MXTRet  	MX.TRet RetWB.TDb uHeatCoolSplit.Tret ;		
link	MXTOut				MX.TOut OAtoMX_DB.a ;	// W.MXTOut
link	MXTmix				MX.TMix	MixWB.TDb	MBtoHC_DB.b ;   // W.MXTmix
LINK	MXTwRet				R.MXTwRet	RetWB.TWb  ;	
LINK	MXwRet				RetWB.w 	MX.wRet  init = 0.05 ;
link	MXwOut				OAtoMX_w.a 	MX.wOut ;	
link	MXTwmix				MixWB.TWb 	init = 10. ; // W.MXTwmix
link	MXwmix				MX.wMix 	MixWB.w	MXtoHC_w.a	 ;	

// link MX damper variables
link	MXminOAfrac			R.MXminOAfrac MX.minOAfrac ;  // changed BC-Feb22-08 	
link	MXOAPosDamper		W.MXOAPosDamper	MX.OAPosDamper	 ;		
link	MXRAPosDamper		W.MXRAPosDamper	MX.RAPosDamper	 ;		
link	MXEAPosDamper		W.MXEAPosDamper	MX.EAPosDamper	 ;		
link	MXOAPosDamperReal	W.MXOAPosDamperReal	MX.OAPosDamperReal	 ;		
link	MXRAPosDamperReal	W.MXRAPosDamperReal	MX.RAPosDamperReal	 ;
link	MXEAPosDamperReal	W.MXEAPosDamperReal	MX.EAPosDamperReal	 ;
link	MXTMixReal			W.MXTMixReal	MX.TMixReal	 s_mx.T_real ;

// link MX damper faults 
LINK	MXLeakOADamper		R.MXLeakOADamper	MX.LeakOADamper	 ;
//LINK	MXBadPosOADamper	R.MXBadPosOADamper	MX.BadPosOADamper	 ;
//LINK	MXStuckOADamper		R.MXStuckOADamper	MX.StuckOADamper	 ;
LINK	MXLeakRADamper		R.MXLeakRADamper	MX.LeakRADamper	 ;
LINK	MXStuckActuator		R.MXStuckActuator	MX.StuckActuator	 ;
//LINK	MXDeafActuator		R.MXDeafActuator	MX.DeafActuator	 ;
//LINK	MXBadSensor			R.MXBadSensor	MX.BadSensor	 ;
//LINK	MXMismatchDampAct	R.MXMismatchDampAct	MX.MismatchDampAct	 ;
LINK	MXReverseActionAct	R.MXReverseActionAct	MX.ReverseActionAct	 ;

// link MX controller variables	
link	MXTmixSensor		s_mx.T_sensor W.MXTp init=15 ; // BC-Feb22-08, removed MXPI.y
link	MXPos				W.MXPos	MX.pos init=0.0 ;	// BC-Feb22-08, added uHeatCoolSplit.uMX, removed MXPI.u
link 	MXcontrolSignal 	MX.controlSignal uHeatCoolSplit.uMX ;
link 	MXprevPos 			MX.prevPos INPUT_FROM_LINK=MXPos ;
link 	MXactuatorSpeed 	MX.actuatorSpeed init=0.05 parameter;




// **********************************************************************************************************************


// *** Filter ***********************************************************************************************************

// link Flt variables
link	FltmAirEnt			W.FltmAirEnt		fi.FltmAirEnt	 ;	
link	FltmAirLvg			W.FltmAirLvg		fi.FltmAirLvg	FItoHC_MF.a ;	
link	FltpreDrop			W.FltpreDrop		fi.FltpreDrop	 ;	
LINK	FltBadDPSensor		R.FltBadDPSensor	fi.FltBadDPSensor ;		
LINK	FltLeakyFilter		R.FltLeakyFilter	fi.FltLeakyFilter ;		
LINK	FltPartlyClogged	R.FltPartlyClogged	fi.FltPartlyClogged ;		

// **********************************************************************************************************************


// *** Heating Coil *****************************************************************************************************

// link HC air variables
link	HCTAirEnt			W.HCTAirEnt	HC.TAirEnt		MBtoHC_DB.a	HCentWB.TDb  ;
link	HCwAirEnt			MXtoHC_w.b W.HCwAirEnt HC.wAirEnt HCentWB.w ;
link	HCTwAirEnt			W.HCTwAirEnt	HCentWB.TWb init = 10. ;			
link	HCwAirLvg			W.HCwAirLvg	HC.wAirLvg	HClvgWB.w		HCtoCC_HR.b ; 
link	HCTAirLvg			W.HCTAirLvg	HC.TAirLvg	HClvgWB.TDb		HCtoCC_DB.b ; 
link	HCTwAirLvg			W.HCTwAirLvg	HClvgWB.TWb	HCtoCC_WB.b init = 10.0 ; 	
LINK	HCUA				R.HCUA	HC.UA	 ;		
link	HCmAirLvg			W.HCmAirLvg	HC.mAirLvg	 ;		
link	HCmAirEnt			W.HCmAirEnt	HC.mAirEnt	HCtoCC_MF.b	FANtoHC_MF.b FItoHC_MF.b ; 


// link HC liquid variables
LINK	HCTLiqEntCoil		R.HCTLiqEnt	HC.TLiqEntCoil ; // move to boiler module?
Link	HCTLiqLvgCoil		W.HCTLiqLvg	HC.TLiqLvgCoil ; 
Link	HCTLiqBypass		W.HCTLiqbypass	HC.TLiqBypass	 ;
//Link	HCTLiqLvgValve		W.HCTLiqLvgValve	HC.TLiqLvgValve	 ; // moved to boiler module
Link	HCTLiqEntValve		W.HCTLiqEntValve	HC.TLiqEntValve	 ;
LINK	HCmLiqOpen			R.HCmLiqOpen	HC.mLiqOpen	;	
LINK	HCmLiqEntCoil		W.HCmLiqEnt	HC.mLiqEntCoil ; 
LINK	HCmLiqLvgCoil		W.HCmLiqLvg	HC.mLiqLvgCoil	 ;
LINK	HCmLiqBypass		W.HCmLiqbypass	HC.mLiqBypass	 ;
//LINK	HCmLiqLvgValve		W.HCmLiqLvgValve	HC.mLiqLvgValve	 ; // moved to boiler module
LINK	HCmLiqEntValve		W.HCmLiqEntValve	HC.mLiqEntValve	 ;

// HC load variables linked in Boiler section below

// link HC fault variables
link	HCposReal			W.HCposReal	HC.posReal ;		
LINK	HCStuckValve		R.HCStuckValve	HC.StuckValve	 ;		
LINK	HCBootLeakage		R.HCBootLeakage	HC.BootLeakage	 ;		
LINK	HCOversizedValve	R.HCOversizedValve	HC.OversizedValve	 ;		
LINK	HCLeakyValve		R.HCLeakyValve	HC.LeakyValve	 ;		
LINK	HCObstructedPipe	R.HCObstructedPipe	HC.ObstructedPipe	 ;	
LINK	HCUndersizedCoil	R.HCUndersizedCoil	HC.UndersizedCoil	 ;	
LINK	HCFouledCoil		R.HCFouledCoil	HC.FouledCoil	 ;	

// link HC controller variables - removed HCPI BC-Feb22-08
LINK	HCStatus			R.HCStatus	HC.Status	 ;	
LINK	HCpos				W.HCpos	HC.pos uHeatCoolSplit.uHC  ;	// BC-Feb22-08, added uHeatCoolSplit.uHC, removed HCPI.u

// **********************************************************************************************************************


// *** Cooling Coil *****************************************************************************************************

// link CC air variables
LINK	CCUA				R.CCUA			CC.UA	 ;		
link	CCTAirEnt			W.CCTAirEnt		CC.TAirEnt	HCtoCC_DB.a	 ;	
link	CCTwAirEnt			W.CCTwAirEnt	HCtoCC_WB.a ;			
link	CCTAirLvg			W.CCTAirLvg		CC.TAirLvg	CCtoFAN_DB.b	CClvgWB.TDb	 ;
link	CCwAirEnt			W.CCwAirEnt		W.CCwTAirEnt	CC.wAirEnt	HCtoCC_HR.a	 ; 	
link	CCwAirLvg			W.CCwAirLvg		CC.wAirLvg	CCtoFAN_HR.b	CClvgWB.w	 ;
link	CCTwAirLvg			W.CCTwAirLvg	CClvgWB.TWb	CCtoFA_WB.a init = 10.0  ; 
link	CCmAirLvg			W.CCmAirLvg		CC.mAirLvg	 ;		
link	CCmAirEnt			W.CCmAirEnt		CC.mAirEnt	HCtoCC_MF.a ;		

// link CC liquid variables
//LINK	CCTLiqEntCoil		R.CCTLiqEnt			CC.TLiqEntCoil	; // move to chiller module?
//Link	CCTLiqLvgCoil		W.CCTLiqLvg			CC.TLiqLvgCoil	; // moved to chiller module
Link	CCTLiqBypass		W.CCTLiqbypass		CC.TLiqBypass	 ;
Link	CCTLiqLvgValve		W.CCTLiqLvgValve	CC.TLiqLvgValve ;
Link	CCTLiqEntValve		W.CCTLiqEntValve	CC.TLiqEntValve ;
LINK	CCmLiqOpen			R.CCmLiqOpen		CC.mLiqOpen		 chiller.evapFlowRate W.CHLevapflow ;	
LINK	CCmLiqEntCoil		W.CCmLiqEnt			CC.mLiqEntCoil	 ;  
LINK	CCmLiqLvgCoil		W.CCmLiqLvg			CC.mLiqLvgCoil	 ;
LINK	CCmLiqBypass		W.CCmLiqbypass		CC.mLiqBypass	 ;
LINK	CCmLiqLvgValve		W.CCmLiqLvgValve	CC.mLiqLvgValve	 ;
LINK	CCmLiqEntValve		W.CCmLiqEntValve	CC.mLiqEntValve	 ;

// link CC load variables
link	CCqSen				W.CCqSen	CC.qSen	 ;		
link	CCqLat				W.CCqLat	CC.qLat	 ; 	
//link	CCqTot				W.CCqTot	CC.qTot	 ;  // moved to chiller module

// link CC fault variables
link	CCposReal			W.CCposReal			CC.posReal	 ;		
LINK	CCStuckValve		R.CCStuckValve		CC.StuckValve	 ;		
LINK	CCBootLeakage		R.CCBootLeakage		CC.BootLeakage	 ;		
LINK	CCOversizedValve	R.CCOversizedValve	CC.OversizedValve	 ;	
LINK	CCLeakyValve		R.CCLeakyValve		CC.LeakyValve	 ;	
LINK	CCObstructedPipe	R.CCObstructedPipe	CC.ObstructedPipe	 ;	
LINK	CCUndersizedCoil	R.CCUndersizedCoil	CC.UndersizedCoil	 ;	
LINK	CCFouledCoil		R.CCFouledCoil		CC.FouledCoil	 ;	

// link CC controller variables
LINK	CCStatus			R.CCStatus	CC.Status	 ;	
LINK	CCpos				W.CCpos		CC.pos uHeatCoolSplit.uCC  ;	// BC-Feb22-08, added uHeatCoolSplit.uCC, removed CCPI.u

// **********************************************************************************************************************


// *** Fan **************************************************************************************************************

// link Fan mechanical variables
link	Fanp				W.Fanp			fa.pFan	 ;		
LINK	FanmAirMaxEff		R.FanmAirMax 	fa.mAirMax ;
link	FanpStatMea			W.FanpStatMea	fa.pStatMea	; 	
link	fanspeed			W.FannReal		fa.fanspeed	init=0 ; 
link	FaneffShaft			W.FaneffShaft	fa.effShaft;	
link 	prevFanspeed 		fa.prevFanspeed INPUT_FROM_LINK=fanspeed ;

// link Fan air variables
link	FanmAirEnt			W.FanmAirEnt	fa.mAir	FANtoHC_MF.a	FANenttoFANlvg_MF.a	;
LINK	FanmAirLvg			R.FanmAirLvg	FAtoSA_MF.a 	FANenttoFANlvg_MF.b ; 
link	FanTAirEnt			W.FanTAirEnt	fa.TAirEnt	CCtoFAN_DB.a	;  
link	FanwAirEnt			W.FanwAirEnt	fa.wAirEnt	CCtoFAN_HR.a	; 
link	FanTwAirEnt			W.FanTwAirEnt	CCtoFA_WB.b ;			
link	FanTAirLvg			W.FanTAirLvg	fa.TAirLvg	FAtoVA_DB.b	FanlvgWB.TDb	FANtoTS_DB.a ; 
link	FanwAirLvg			W.FanwAirLvg	fa.wAirLvg	FAtoVA_HR.b	FanlvgWB.w	; 
link	FanTwAirLvg			W.FanTwAirLvg	FanlvgWB.TWb	FAtoVA_WB.b init = 10. ; 
link	FanpowerTot			W.FanpowerTot	fa.powerTot	 ; 	

// link Fan faults variables
//LINK	FanRangeErrorVFD	R.FanRangeErrorVFD	fa.RangeErrorVFD	 ;		
//LINK	FanTotFanFailure	R.FanTotFanFailure	fa.TotFanFailure	 ;		
//LINK	FanWrongFanType		R.FanWrongFanType	fa.WrongFanType	 ;		
//LINK	FanFanTooSmall		R.FanFanTooSmall	fa.FanTooSmall	 ;		
//LINK	FanStuckFanSpeed	R.FanStuckFanSpeed	fa.StuckFanSpeed	 ;		
//LINK	FanDeafVFDorIGV		R.FanDeafVFDorIGV	fa.DeafVFDorIGV	 ;		
LINK	FanStatPresSensorOffset R.FanStatPresSensorOffset fa.FanStatPresSensorOffset ;		
//LINK	FanBadFanRotationnDir	R.FanBadFanRotationnDir	fa.BadFanRotationnDir	 ;

// link Fan controller variables
LINK	FanpStat			R.FanpStat	FanPI.w	 ;		
link	FanpStatSS			W.FanpStatReal	fa.pStat	VAV_damper.p_drop	s_fan.P_real W.VAVpre ;
LINK    FanpStatSensorReal  s_fan.P_sensor FanPI.y  W.FanTp ; 
link	Fani				FanPI.i ;	
link	FaniP				FanPI.iP	INPUT_FROM_LINK=Fani;
LINK	FanKp				R.FanKp	FanPI.Kp	 ;		
LINK	FanKi				R.FanKi	FanPI.Ki	 ;		
LINK	FanKd				R.FanKd	 ;		
link	Fanfr				R.Fanfr	FanPI.fr ;
LINK	Fanbias				R.Fanbias	FanPI.bias	 ;		
link	FannCon				W.FannCon	FanPI.u		fa.control_sig;	

// **********************************************************************************************************************


// *** VAV **************************************************************************************************************

// link VAV variables
LINK	mVAVmax 			RoomAirflowFrac.c VAV_damper.mVAVmax VAV_control.mVAVmax; // "mass flow rate if damper is fully opened"
link	mVAV				W.VAVm	VAV_damper.mVAVreal	Rm.mAir	 VAtoRM_MF.b ; //  "damper mass flow rate" 

// link VAV fault variables
LINK	VAVStuckDamper		R.VAVStuckDamper	VAV_damper.StuckDamper	 ;		
LINK	VAVLeakyDamper		R.VAVLeakyDamper	VAV_damper.LeakyDamper	 ;		
//LINK	VAVBadDmprPosSignal	R.VAVBadDmprPosSignal VAV_damper.BadDmprPosSignal	 ;	
LINK	VAVFlowSensorOffset	R.VAVFlowSensorOffset VAV_damper.VAVFlowSensorOffset ;		
LINK	VAVFailedActuator	R.VAVFailedActuator	VAV_damper.FailedActuator	 ;		
//LINK	VAVBadReheatCoil	R.VAVBadReheatCoil	VAV_damper.BadReheatCoil	 ;		
//LINK	VAVTooHighInletAirSP	R.VAVTooHighInletAirSP	VAV_damper.TooHighInletAirSP	 ;		
//LINK	VAVTooLowInletAirSP	R.VAVTooLowInletAirSP	VAV_damper.TooLowInletAirSP	 ;		
LINK	VAVBoxTooBig		R.VAVBoxTooBig	VAV_damper.BoxTooBig	 ;		
LINK	VAVBoxTooSmall		R.VAVBoxTooSmall	VAV_damper.BoxTooSmall	 ;		
LINK	VAVBadMinPosDamper 	R.VAVBadMinPosDamper	VAV_damper_position.BadMinPosDamper	 ;	

// link VAV damper variables
link	VAVCFMSP			W.VAVDAMPTs	VAVDAMPPI.w	VAV_control.CFMSP 	 ;			
link	VAVCFMReal			W.VAVDAMPTr	VAV_damper.mVAVmeas W.VAVDAMPTp	;	
link 	VAVCFMRealP 		VAVDAMPPI.y INPUT_FROM_LINK=VAVCFMReal ; // note: added BC-July15-0-9, to ensure avoidance of any non-convergence problems
link	VAVDAMPi			VAVDAMPPI.i ;			
link	VAVDAMPiP			VAVDAMPPI.iP	INPUT_FROM_LINK=VAVDAMPi  ;			
LINK	VAVDAMPKp			R.VAVDAMPKp	VAVDAMPPI.Kp	 ;				
LINK	VAVDAMPKi			R.VAVDAMPKi	VAVDAMPPI.Ki	 ;				
LINK	VAVDAMPKd			R.VAVDAMPKd	 ;				
link	VAVDAMPfr			R.VAVDAMPfr	VAVDAMPPI.fr ;
LINK	VAVDAMPbias			R.VAVDAMPbias	VAVDAMPPI.bias	 ;			
link	VAVDAMPosCon		VAVDAMPPI.u VAV_damper_position.damp_pos_con ; 
link	VAVDAMPosMin		VAV_damper_position.damp_pos_min_des R.VAVposMin	;
link    VAVDAMPosReal   	W.VAVDAMPos VAV_damper_position.damp_pos_lim VAV_damper.damp_pos	W.VAVPos init=0 ; 	

link	VAVDAMPPosPrev		VAV_damper_position.damp_pos_prev  input_FROM_LINK=VAVDAMPosReal ;

// link VAVHC air variables
link	VAVHCTAirEnt		W.VAVHCTAirEnt	VAVHC.TAirEnt	FAtoVA_DB.a	; 
link	VAVHCwAirEnt		W.VAVHCwAirEnt	VAVHC.wAirEnt	FAtoVA_HR.a	VAVHClvgWB.w	; 
link	VAVHCTwAirEnt		W.VAVHCTwAirEnt	FAtoVA_WB.a ;				
link	VAVHCwAirLvg		W.VAVHCwAirLvg	VAVHC.wAirLvg  ;
link	VAVHCTwAirLvg		W.VAVHCTwAirLvg	VAVHClvgWB.TWb init = 10. ; 		
LINK	VAVHCUA				R.VAVHCUA	VAVHC.UA	 ;			
link	VAVHCmAirLvg		W.VAVHCmAirLvg	VAVHC.mAirLvg	 ; 		
link	VAVHCmAirEnt		W.VAVHCmAirEnt	VAVHC.mAirEnt	VAtoRM_MF.a	 ;		

link	VAVHCTAirLvg		VAVHC.TAirLvg	VAVHClvgWB.TDb Rm.TSup s_VAVout.T_real ; 
link 	VAVHCTAirLvgSensor 	s_VAVout.T_sensor W.VAVHCTAirLvg ; 

// link VAVHC liquid variables
LINK	VAVHCTLiqEntCoil	R.VAVHCTLiqEnt	VAVHC.TLiqEntCoil	 ; 
Link	VAVHCTLiqLvgCoil	W.VAVHCTLiqLvg	VAVHC.TLiqLvgCoil	 ; 
Link	VAVHCTLiqBypass		W.VAVHCTLiqbypass	VAVHC.TLiqBypass	 ;
Link	VAVHCTLiqLvgValve	W.VAVHCTLiqLvgValve	VAVHC.TLiqLvgValve	 ;
Link	VAVHCTLiqEntValve	W.VAVHCTLiqEntValve	VAVHC.TLiqEntValve	 ;
LINK	VAVHCmLiqEntCoil	W.VAVHCmLiqEnt	VAVHC.mLiqEntCoil	 ; 
LINK	VAVHCmLiqLvgCoil	W.VAVHCmLiqLvg	VAVHC.mLiqLvgCoil	 ;
LINK	VAVHCmLiqBypass		W.VAVHCmLiqbypass	VAVHC.mLiqBypass	 ;
LINK	VAVHCmLiqLvgValve	W.VAVHCmLiqLvgValve	VAVHC.mLiqLvgValve	 ;
LINK	VAVHCmLiqEntValve	W.VAVHCmLiqEntValve	VAVHC.mLiqEntValve	 ;

// link VAVHC load variables
link	VAVHCq				VAVHC.qTot	; // W.VAVHCq 	

// link VAVHC fault variables
link	VAVHCposReal		W.VAVHCposReal	VAVHC.posReal	; 
LINK	VAVHCmLiqOpen		R.VAVHCmLiqOpen	VAVHC.mLiqOpen		 ;	
LINK	VAVHCStuckValve		R.VAVHCStuckValve	VAVHC.StuckValve	 ;	
LINK	VAVHCBootLeakage	R.VAVHCBootLeakage	VAVHC.BootLeakage	 ;	
LINK	VAVHCOversizedValve	R.VAVHCOversizedValve	VAVHC.OversizedValve	 ;	
LINK	VAVHCLeakyValve		R.VAVHCLeakyValve	VAVHC.LeakyValve	 ;	
LINK	VAVHCObstructedPipe	R.VAVHCObstructedPipe	VAVHC.ObstructedPipe	 ;	
LINK	VAVHCUndersizedCoil	R.VAVHCUndersizedCoil	VAVHC.UndersizedCoil	 ;	
LINK	VAVHCFouledCoil		R.VAVHCFouledCoil	VAVHC.FouledCoil	 ;	

// link VAV controller variables
LINK	VAVHCStatus			R.VAVHCStatus	VAVHC.Status	;	
link	VAVi				VAVPI.i		;
link	VAViP				VAVPI.iP   	input_FROM_LINK=VAVi	;
LINK	VAVKp				R.VAVKp		VAVPI.Kp	 ;	
LINK	VAVKi				R.VAVKi		VAVPI.Ki	 ;	
LINK	VAVKd				R.VAVKd	 	;	
link	VAVfr				R.VAVfr		VAVPI.fr ;
LINK	VAVbias				R.VAVbias	VAVPI.bias	 ;	
LINK	VAVPICS 			VAVPI.u		VAV_control.VAVSignal ;
LINK    VAVHCpos 			W.VAVHCpos 	VAVHC.pos  VAV_control.HCcoilPosDemand ;

LINK	VAVCLprevLevel		VAV_control.previousVAVlevel input_FROM_LINK=VAVCLcurLevel ;
LINK	VAVCLcurLevel		VAV_control.currentVAVlevel init=0.5 ;


// **********************************************************************************************************************


// *** Room *************************************************************************************************************

// link Room temp, setpoint, deadband, internal loads, etc
LINK    TRoomSPDB 			R.TRoomSPDB    ; //room air temperature deadband, not used
link    TRoomSS 			W.VAVCFMTp  W.VAVHCTp s_rm.T_real Rm.TRoom  init=21.0;
link    TRoomSSP  			Rm.TRoomP INPUT_FROM_LINK=TRoomSS ;
LINK	TRoomSP 			VAVSPmanager.w 	VAVPI.w  ; 	//room	air	temperature	setpoint
LINK 	TRoomSP_Heat 		R.TRoomSP_Heat VAVSPmanager.SP_Heat ;
LINK 	TRoomSP_Cool 		R.TRoomSP_Cool VAVSPmanager.SP_Cool ;
LINK 	HeatCoolMode 		R.HeatCoolMode VAVSPmanager.HeatCoolMode ;
link	TRoomSensor			W.TRoom	s_rm.T_sensor  init=21.0;
link 	TRoomSensorP 		VAVPI.y INPUT_FROM_LINK=TRoomSensor W.VAVHCq ; // note: added BC-July15-0-9, to ensure avoidance of any non-convergence problems
LINK	RmQSENS				R.RmQSENS Rm.QSENS  	 ;	
link	RmTRoomW			W.RmTRoomW Rm.TwRoom	 ;	
link	UARoom				Rm.UARoom init=0.0 parameter ; 		//"UA of the room" [W/C], should be about 200? if the zone is a perimeter zone, it and should be a user input, but set to zero here as a core zone; 
link	cRoomAir			Rm.cRoomAir init=50.0 parameter ; 		//"thermal capacitance of the room (air plus furniture)" [kJ/C], should be a user input, and should be about 150, but decreased here for easier demonstration; 

// **********************************************************************************************************************


 
// *** Boiler ***********************************************************************************************************
// based on spark boiler model by Dimitri Curtil, equivalent to the EnergyPlus BOILER:SIMPLE

// parameters
LINK 	Boiler_FlowType		boiler.FlowType 		init=1 parameter ;
LINK 	Boiler_efficiency   boiler.efficiency		init=0.9 parameter ;
LINK 	Boiler_cp			boiler.cp				init=4186.0 parameter ; 	// Heat capacity of water at current inlet temperature (Computed in EnergyPlus using native psychrometric routines.)
LINK 	Boiler_T_limit		boiler.T_limit 			init=95.0 parameter ; 	// Upper limit for outlet water temperature [C]
LINK 	Boiler_Qdot_nominal	boiler.Qdot_nominal 	R.BOIcap ; 				// Nominal load capacity [W]
LINK	Boiler_ParasiticElecLoad boiler.ParasiticElecLoad init=15.0 parameter ; // Parasitic electric power (e.g. forced draft fan) [W] (? difference from below?)
LINK	Boiler_C1 			boiler.C1 				init=1.0 parameter ; 	// Part-load ratio data
LINK	Boiler_C2 			boiler.C2 				init=0.0 parameter ;
LINK	Boiler_C3 			boiler.C3 				init=0.0 parameter ;
LINK	Boiler_PLR_min 		boiler.PLR_min 			init=0.1 parameter ;
LINK	Boiler_PLR_max 		boiler.PLR_max 			init=0.9 parameter ;	
LINK	Boiler_mdot_tol		boiler.mdot_tol 		init=0.01 parameter ; 	// Tolerance for mass flow rate [kg/s]
LINK 	Boiler_mdot_design 	boiler.mdot_design 		init=10.0 parameter ; 	// Design mass flow rate [kg/s]

// inputs
LINK 	Boiler_FlowLockFlag boiler.FlowLockFlag		init=1 parameter ;		// default is 0, 1 is locked (constant flow rate)
Link	HCTLiqLvgValve		W.HCTLiqLvgValve		HC.TLiqLvgValve boiler.T_inlet W.BOItin ; // Boiler inlet temperature / HC valve outlet temp
LINK 	Boiler_T_setpoint	boiler.T_setpoint		R.BOItset ; 			// Set point temperature on the oulet node [C]
LINK 	Boiler_Load_req		boiler.Qdot_requested 	HC.qTot W.HCq ; 	// Requested load [W]
LINK 	Boiler_mdot_locked	boiler.mdot_locked 		W.HCmLiqLvgValve	HC.mLiqLvgValve	 W.BOIwaterflow ; 	// Resolved branch mass flow rate [kg/s]

// outputs
LINK	Boiler_T_outlet				boiler.T_outlet				W.BOItout ; // HC.TLiqEntCoil init=60.0 ; // water temp leaving boiler, entering heating coil
LINK	Boiler_Qdot					boiler.Qdot 				W.BOIqdot ; // Heat transfer rate [W]
LINK	Boiler_FuelUsed				boiler.FuelUsed  			W.BOIfuel ; // Fuel heat transfer [W]
LINK	Boiler_TheorFuelUsed		boiler.TheorFuelUsed		 ;
LINK	Boiler_ParasiticElecPower	boiler.ParasiticElecPower	 ; 	// Parasitic Electrical Power (e.g. forced draft fan) [W]
LINK 	Boiler_PLR 					boiler.PLR 					 ; 	// Part load ratio
LINK 	Boiler_mdot 				boiler.mdot					 ; 	// Water mass flow rate through boiler [kg/s]

// **********************************************************************************************************************


// *** Chiller **********************************************************************************************************
// simple chiller model based on the DOE2 / EnergyPlus chiller model, implemented Brian Coffey, Feb09

// inputs
link 	chillEvapInletTemp		chiller.evapInletTemp CC.TLiqLvgCoil W.CCTLiqLvg W.CHLevapin ; // " Chilled Water Inlet Temperature " [C]
link 	chillEvapOutletTempSP	chiller.evapOutletTempSP R.CHLevapset ; 		// " Chilled Water Outlet Setpoint Temperature " [C]
link	chillCondInletTemp 		chiller.condInletTemp  coolingTower.TLiqLvg  W.CTWtout;	// " Condensor Water Inlet Temperature " [C];
link 	chillCondFlowRate 		chiller.condFlowRate  R.CHLcondflow coolingTower.mLiq ;	// " Condensor Water flow rate " [-];
link	CCqTot					chiller.requestedLoad  W.CCqTot  CC.qTot ;  	// " Requested load " [W]
link 	chillRatedCapacity 		chiller.ratedCapacity  R.CHLcap ;				// " Maximum capacity " [W] 
link 	chillRatedEIR 			chiller.ratedEIR init=0.3 parameter; 			// " Rated EIR of chiller " [W]
link 	chillPumpEff 			chiller.pumpEfficiency init=3.21 parameter; 	// " Pump efficiency " [W / kg/s]
//      note that water flow rate is linked to the cooling coil water flow rate

// outputs
link	chillEvapOutletTemp 	chiller.evapOutletTemp CC.TLiqEntCoil W.CHLevapout ; 	// " Chilled Water Outlet Temperature " [C]
link 	chillCondOutletTemp 	chiller.condOutletTemp W.CHLcondout coolingTower.TLiqEnt ;	// " Condensor Water Outlet Temperature " [C];
link 	chillCoolingPower 		chiller.coolingPower W.CHLqdot ;
link	chillCompPower			chiller.compPower W.CHLcomppow ; 				// " Compressor power consumption " [W] ;
link 	chillPumpPower 			chiller.pumpPower W.CHLpumppow ;


// should be deleted 
link 	R.CCTLiqEnt ;
link 	R.CHLcondin ;


// **********************************************************************************************************************


// *** Cooling Tower ****************************************************************************************************
// simple cooling tower model based on an NTU-effectiveness heat exchanger model

// should be deleted or modified in the text/user interface
LINK	R.CTWwaterflow 			;  
LINK	R.CTWtin 				;  
//LINK	R.CTWmakeuptemp 		;  
//LINK	W.CTWmakeuprate			init=1.0 parameter;

// should be added as inputs to the text/user interface
LINK 	CTAURated 				coolingTower.UA			R.CTWmakeuptemp;	// "Tower AU"    [] 
LINK 	CTmAirRated 			coolingTower.mAirRated  init=1 parameter; 	// "Rated air flow"        [m3/s dry air] 
LINK 	CTmAir 					coolingTower.mAir  		init=1 parameter; 	// "Air flow"            [m3/s dry air] 
LINK 	CTfanStatic 			coolingTower.fanStatic  init=100 parameter; // "Fan static pressure"    [Pa] 
LINK 	CTfanEff 				coolingTower.fanEff  	init=0.3 parameter; // "Fan efficiency"    [] 
LINK 	CTpumpHead 				coolingTower.pumpHead  	init=3 parameter; 	// "Water pump head"        [m] 
LINK 	CTpumpEff 				coolingTower.pumpEff  	init=0.6 parameter; // "Water pump efficiency"        [] 

// linked to other components: coolingTower.TWb, coolingTower.mLiq, coolingTower.TLiqEnt, coolingTower.TLiqLvg

// iterative link
LINK 	CTTWbOut 				coolingTower.TWbOut 	;
LINK	CTTwbOutPrev 			coolingTower.TWbOutPrev init=25 parameter;

// outputs
LINK 	CTqTot 					coolingTower.qTot 		W.CTWmakeuprate; 	// "Total heat transfer rate  Positive for water cooling"    [W] 
LINK 	CTpumpPower				coolingTower.pumpPower	; 					// "Power consumed by pump"    [W] 
LINK 	CTfanPower 				coolingTower.fanPower 	; 					// "Power consumed by fan"  [W]

// **********************************************************************************************************************
